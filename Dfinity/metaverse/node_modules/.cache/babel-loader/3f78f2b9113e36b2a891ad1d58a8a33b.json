{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_CLIENT_CONFIG = void 0;\n\nconst utils_1 = require(\"./utils\");\n\nconst document_1 = require(\"./document\");\n\nconst common_1 = require(\"@ceramicnetwork/common\");\n\nconst stream_tile_1 = require(\"@ceramicnetwork/stream-tile\");\n\nconst stream_caip10_link_1 = require(\"@ceramicnetwork/stream-caip10-link\");\n\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\n\nconst API_PATH = '/api/v0';\nconst CERAMIC_HOST = 'http://localhost:7007';\nexports.DEFAULT_CLIENT_CONFIG = {\n  syncInterval: 5000\n};\nconst DEFAULT_APPLY_COMMIT_OPTS = {\n  anchor: true,\n  publish: true,\n  sync: common_1.SyncOptions.PREFER_CACHE\n};\nconst DEFAULT_CREATE_FROM_GENESIS_OPTS = {\n  anchor: true,\n  publish: true,\n  sync: common_1.SyncOptions.PREFER_CACHE\n};\nconst DEFAULT_LOAD_OPTS = {\n  sync: common_1.SyncOptions.PREFER_CACHE\n};\n\nclass CeramicClient {\n  constructor(apiHost = CERAMIC_HOST, config = {}) {\n    this._config = { ...exports.DEFAULT_CLIENT_CONFIG,\n      ...config\n    };\n    this._apiUrl = utils_1.combineURLs(apiHost, API_PATH);\n    this._streamCache = new Map();\n    this.context = {\n      api: this\n    };\n    this.pin = this._initPinApi();\n    this._streamConstructors = {\n      [stream_tile_1.TileDocument.STREAM_TYPE_ID]: stream_tile_1.TileDocument,\n      [stream_caip10_link_1.Caip10Link.STREAM_TYPE_ID]: stream_caip10_link_1.Caip10Link\n    };\n  }\n\n  get did() {\n    return this.context.did;\n  }\n\n  set did(did) {\n    this.context.did = did;\n  }\n\n  _initPinApi() {\n    return {\n      add: async streamId => {\n        await common_1.fetchJson(this._apiUrl + '/pins' + `/${streamId.toString()}`, {\n          method: 'post'\n        });\n      },\n      rm: async streamId => {\n        await common_1.fetchJson(this._apiUrl + '/pins' + `/${streamId.toString()}`, {\n          method: 'delete'\n        });\n      },\n      ls: async streamId => {\n        let url = this._apiUrl + '/pins';\n\n        if (streamId) {\n          url += `/${streamId.toString()}`;\n        }\n\n        const result = await common_1.fetchJson(url);\n        const {\n          pinnedStreamIds\n        } = result;\n        return {\n          [Symbol.asyncIterator]() {\n            let index = 0;\n            return {\n              next() {\n                if (index === pinnedStreamIds.length) {\n                  return Promise.resolve({\n                    value: null,\n                    done: true\n                  });\n                }\n\n                return Promise.resolve({\n                  value: pinnedStreamIds[index++],\n                  done: false\n                });\n              }\n\n            };\n          }\n\n        };\n      }\n    };\n  }\n\n  async createStreamFromGenesis(type, genesis, opts = {}) {\n    opts = { ...DEFAULT_CREATE_FROM_GENESIS_OPTS,\n      ...opts\n    };\n    const stream = await document_1.Document.createFromGenesis(this._apiUrl, type, genesis, opts, this._config.syncInterval);\n\n    const found = this._streamCache.get(stream.id.toString());\n\n    if (found) {\n      if (!common_1.StreamUtils.statesEqual(stream.state, found.state)) found.next(stream.state);\n      return this.buildStream(found);\n    } else {\n      this._streamCache.set(stream.id.toString(), stream);\n\n      return this.buildStream(stream);\n    }\n  }\n\n  async loadStream(streamId, opts = {}) {\n    opts = { ...DEFAULT_LOAD_OPTS,\n      ...opts\n    };\n    const streamRef = streamid_1.StreamRef.from(streamId);\n\n    let stream = this._streamCache.get(streamRef.baseID.toString());\n\n    if (stream) {\n      await stream._syncState(streamRef, opts);\n    } else {\n      stream = await document_1.Document.load(streamRef, this._apiUrl, this._config.syncInterval, opts);\n\n      this._streamCache.set(stream.id.toString(), stream);\n    }\n\n    return this.buildStream(stream);\n  }\n\n  async multiQuery(queries) {\n    const queriesJSON = queries.map(q => {\n      return {\n        streamId: typeof q.streamId === 'string' ? q.streamId : q.streamId.toString(),\n        paths: q.paths,\n        atTime: q.atTime\n      };\n    });\n    const results = await common_1.fetchJson(this._apiUrl + '/multiqueries', {\n      method: 'post',\n      body: {\n        queries: queriesJSON\n      }\n    });\n    return Object.entries(results).reduce((acc, e) => {\n      const [k, v] = e;\n      const state = common_1.StreamUtils.deserializeState(v);\n      const stream = new document_1.Document(state, this._apiUrl, this._config.syncInterval);\n      acc[k] = this.buildStream(stream);\n      return acc;\n    }, {});\n  }\n\n  loadStreamCommits(streamId) {\n    const effectiveStreamId = utils_1.typeStreamID(streamId);\n    return document_1.Document.loadStreamCommits(effectiveStreamId, this._apiUrl);\n  }\n\n  async applyCommit(streamId, commit, opts = {}) {\n    opts = { ...DEFAULT_APPLY_COMMIT_OPTS,\n      ...opts\n    };\n    const effectiveStreamId = utils_1.typeStreamID(streamId);\n    const document = await document_1.Document.applyCommit(this._apiUrl, effectiveStreamId, commit, opts, this._config.syncInterval);\n\n    const fromCache = this._streamCache.get(effectiveStreamId.toString());\n\n    if (fromCache) {\n      fromCache.next(document.state);\n      return this.buildStream(document);\n    } else {\n      this._streamCache.set(effectiveStreamId.toString(), document);\n\n      return this.buildStream(document);\n    }\n  }\n\n  addStreamHandler(streamHandler) {\n    this._streamConstructors[streamHandler.name] = streamHandler.stream_constructor;\n  }\n\n  findStreamConstructor(type) {\n    const constructor = this._streamConstructors[type];\n\n    if (constructor) {\n      return constructor;\n    } else {\n      throw new Error(`Failed to find constructor for stream ${type}`);\n    }\n  }\n\n  buildStream(stream) {\n    const streamConstructor = this.findStreamConstructor(stream.state.type);\n    return new streamConstructor(stream, this.context);\n  }\n\n  async setDID(did) {\n    this.context.did = did;\n  }\n\n  async getSupportedChains() {\n    if (this._supportedChains) {\n      return this._supportedChains;\n    }\n\n    const {\n      supportedChains\n    } = await common_1.fetchJson(this._apiUrl + '/node/chains');\n    this._supportedChains = supportedChains;\n    return supportedChains;\n  }\n\n  async close() {\n    Array.from(this._streamCache).map(([, stream]) => {\n      stream.complete();\n    });\n\n    this._streamCache.clear();\n  }\n\n}\n\nexports.default = CeramicClient;","map":{"version":3,"sources":["../src/ceramic-http-client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_CLIENT_CONFIG = void 0;\nconst utils_1 = require(\"./utils\");\nconst document_1 = require(\"./document\");\nconst common_1 = require(\"@ceramicnetwork/common\");\nconst stream_tile_1 = require(\"@ceramicnetwork/stream-tile\");\nconst stream_caip10_link_1 = require(\"@ceramicnetwork/stream-caip10-link\");\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\nconst API_PATH = '/api/v0';\nconst CERAMIC_HOST = 'http://localhost:7007';\nexports.DEFAULT_CLIENT_CONFIG = {\n    syncInterval: 5000,\n};\nconst DEFAULT_APPLY_COMMIT_OPTS = { anchor: true, publish: true, sync: common_1.SyncOptions.PREFER_CACHE };\nconst DEFAULT_CREATE_FROM_GENESIS_OPTS = { anchor: true, publish: true, sync: common_1.SyncOptions.PREFER_CACHE };\nconst DEFAULT_LOAD_OPTS = { sync: common_1.SyncOptions.PREFER_CACHE };\nclass CeramicClient {\n    constructor(apiHost = CERAMIC_HOST, config = {}) {\n        this._config = { ...exports.DEFAULT_CLIENT_CONFIG, ...config };\n        this._apiUrl = utils_1.combineURLs(apiHost, API_PATH);\n        this._streamCache = new Map();\n        this.context = { api: this };\n        this.pin = this._initPinApi();\n        this._streamConstructors = {\n            [stream_tile_1.TileDocument.STREAM_TYPE_ID]: stream_tile_1.TileDocument,\n            [stream_caip10_link_1.Caip10Link.STREAM_TYPE_ID]: stream_caip10_link_1.Caip10Link\n        };\n    }\n    get did() {\n        return this.context.did;\n    }\n    set did(did) {\n        this.context.did = did;\n    }\n    _initPinApi() {\n        return {\n            add: async (streamId) => {\n                await common_1.fetchJson(this._apiUrl + '/pins' + `/${streamId.toString()}`, { method: 'post' });\n            },\n            rm: async (streamId) => {\n                await common_1.fetchJson(this._apiUrl + '/pins' + `/${streamId.toString()}`, { method: 'delete' });\n            },\n            ls: async (streamId) => {\n                let url = this._apiUrl + '/pins';\n                if (streamId) {\n                    url += `/${streamId.toString()}`;\n                }\n                const result = await common_1.fetchJson(url);\n                const { pinnedStreamIds } = result;\n                return {\n                    [Symbol.asyncIterator]() {\n                        let index = 0;\n                        return {\n                            next() {\n                                if (index === pinnedStreamIds.length) {\n                                    return Promise.resolve({ value: null, done: true });\n                                }\n                                return Promise.resolve({ value: pinnedStreamIds[index++], done: false });\n                            }\n                        };\n                    }\n                };\n            }\n        };\n    }\n    async createStreamFromGenesis(type, genesis, opts = {}) {\n        opts = { ...DEFAULT_CREATE_FROM_GENESIS_OPTS, ...opts };\n        const stream = await document_1.Document.createFromGenesis(this._apiUrl, type, genesis, opts, this._config.syncInterval);\n        const found = this._streamCache.get(stream.id.toString());\n        if (found) {\n            if (!common_1.StreamUtils.statesEqual(stream.state, found.state))\n                found.next(stream.state);\n            return this.buildStream(found);\n        }\n        else {\n            this._streamCache.set(stream.id.toString(), stream);\n            return this.buildStream(stream);\n        }\n    }\n    async loadStream(streamId, opts = {}) {\n        opts = { ...DEFAULT_LOAD_OPTS, ...opts };\n        const streamRef = streamid_1.StreamRef.from(streamId);\n        let stream = this._streamCache.get(streamRef.baseID.toString());\n        if (stream) {\n            await stream._syncState(streamRef, opts);\n        }\n        else {\n            stream = await document_1.Document.load(streamRef, this._apiUrl, this._config.syncInterval, opts);\n            this._streamCache.set(stream.id.toString(), stream);\n        }\n        return this.buildStream(stream);\n    }\n    async multiQuery(queries) {\n        const queriesJSON = queries.map(q => {\n            return {\n                streamId: typeof q.streamId === 'string' ? q.streamId : q.streamId.toString(),\n                paths: q.paths,\n                atTime: q.atTime\n            };\n        });\n        const results = await common_1.fetchJson(this._apiUrl + '/multiqueries', {\n            method: 'post',\n            body: {\n                queries: queriesJSON\n            }\n        });\n        return Object.entries(results).reduce((acc, e) => {\n            const [k, v] = e;\n            const state = common_1.StreamUtils.deserializeState(v);\n            const stream = new document_1.Document(state, this._apiUrl, this._config.syncInterval);\n            acc[k] = this.buildStream(stream);\n            return acc;\n        }, {});\n    }\n    loadStreamCommits(streamId) {\n        const effectiveStreamId = utils_1.typeStreamID(streamId);\n        return document_1.Document.loadStreamCommits(effectiveStreamId, this._apiUrl);\n    }\n    async applyCommit(streamId, commit, opts = {}) {\n        opts = { ...DEFAULT_APPLY_COMMIT_OPTS, ...opts };\n        const effectiveStreamId = utils_1.typeStreamID(streamId);\n        const document = await document_1.Document.applyCommit(this._apiUrl, effectiveStreamId, commit, opts, this._config.syncInterval);\n        const fromCache = this._streamCache.get(effectiveStreamId.toString());\n        if (fromCache) {\n            fromCache.next(document.state);\n            return this.buildStream(document);\n        }\n        else {\n            this._streamCache.set(effectiveStreamId.toString(), document);\n            return this.buildStream(document);\n        }\n    }\n    addStreamHandler(streamHandler) {\n        this._streamConstructors[streamHandler.name] = streamHandler.stream_constructor;\n    }\n    findStreamConstructor(type) {\n        const constructor = this._streamConstructors[type];\n        if (constructor) {\n            return constructor;\n        }\n        else {\n            throw new Error(`Failed to find constructor for stream ${type}`);\n        }\n    }\n    buildStream(stream) {\n        const streamConstructor = this.findStreamConstructor(stream.state.type);\n        return new streamConstructor(stream, this.context);\n    }\n    async setDID(did) {\n        this.context.did = did;\n    }\n    async getSupportedChains() {\n        if (this._supportedChains) {\n            return this._supportedChains;\n        }\n        const { supportedChains } = await common_1.fetchJson(this._apiUrl + '/node/chains');\n        this._supportedChains = supportedChains;\n        return supportedChains;\n    }\n    async close() {\n        Array.from(this._streamCache).map(([, stream]) => {\n            stream.complete();\n        });\n        this._streamCache.clear();\n    }\n}\nexports.default = CeramicClient;\n//# sourceMappingURL=ceramic-http-client.js.map"]},"metadata":{},"sourceType":"script"}