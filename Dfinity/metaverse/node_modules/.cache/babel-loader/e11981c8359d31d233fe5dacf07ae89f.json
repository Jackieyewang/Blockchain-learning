{"ast":null,"code":"\"use strict\";\n\nconst stream_1 = require(\"stream\");\n\nmodule.exports = class PortDuplexStream extends stream_1.Duplex {\n  /**\n   * @param port - An instance of WebExtensions Runtime.Port. See:\n   * {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/Port}\n   */\n  constructor(port) {\n    super({\n      objectMode: true\n    });\n    this._port = port;\n\n    this._port.onMessage.addListener(msg => this._onMessage(msg));\n\n    this._port.onDisconnect.addListener(() => this._onDisconnect());\n  }\n  /**\n   * Callback triggered when a message is received from\n   * the remote Port associated with this Stream.\n   *\n   * @param msg - Payload from the onMessage listener of the port\n   */\n\n\n  _onMessage(msg) {\n    if (Buffer.isBuffer(msg)) {\n      const data = Buffer.from(msg);\n      this.push(data);\n    } else {\n      this.push(msg);\n    }\n  }\n  /**\n   * Callback triggered when the remote Port associated with this Stream\n   * disconnects.\n   */\n\n\n  _onDisconnect() {\n    this.destroy();\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called internally when data should be written to this writable stream.\n   *\n   * @param msg - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param cb - Called when writing is complete or an error occurs\n   */\n\n\n  _write(msg, _encoding, cb) {\n    try {\n      if (Buffer.isBuffer(msg)) {\n        const data = msg.toJSON();\n        data._isBuffer = true;\n\n        this._port.postMessage(data);\n      } else {\n        this._port.postMessage(msg);\n      }\n    } catch (error) {\n      return cb(new Error('PortDuplexStream - disconnected'));\n    }\n\n    return cb();\n  }\n\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAGA,MAAA,CAAA,OAAA,GAAS,MAAM,gBAAN,SAA+B,QAAA,CAAA,MAA/B,CAAqC;AAG5C;;;AAGG;AACH,EAAA,WAAA,CAAY,IAAZ,EAA8B;AAC5B,UAAM;AAAE,MAAA,UAAU,EAAE;AAAd,KAAN;AACA,SAAK,KAAL,GAAa,IAAb;;AACA,SAAK,KAAL,CAAW,SAAX,CAAqB,WAArB,CAAkC,GAAD,IAAkB,KAAK,UAAL,CAAgB,GAAhB,CAAnD;;AACA,SAAK,KAAL,CAAW,YAAX,CAAwB,WAAxB,CAAoC,MAAM,KAAK,aAAL,EAA1C;AACD;AAED;;;;;AAKG;;;AACK,EAAA,UAAU,CAAC,GAAD,EAAa;AAC7B,QAAI,MAAM,CAAC,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACxB,YAAM,IAAI,GAAW,MAAM,CAAC,IAAP,CAAY,GAAZ,CAArB;AACA,WAAK,IAAL,CAAU,IAAV;AACD,KAHD,MAGO;AACL,WAAK,IAAL,CAAU,GAAV;AACD;AACF;AAED;;;AAGG;;;AACK,EAAA,aAAa,GAAA;AACnB,SAAK,OAAL;AACD;AAED;;AAEG;;;AACH,EAAA,KAAK,GAAA;AACH,WAAO,SAAP;AACD;AAED;;;;;;AAMG;;;AACH,EAAA,MAAM,CACJ,GADI,EAEJ,SAFI,EAGJ,EAHI,EAG8B;AAElC,QAAI;AACF,UAAI,MAAM,CAAC,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACxB,cAAM,IAAI,GAA4B,GAAG,CAAC,MAAJ,EAAtC;AACA,QAAA,IAAI,CAAC,SAAL,GAAiB,IAAjB;;AACA,aAAK,KAAL,CAAW,WAAX,CAAuB,IAAvB;AACD,OAJD,MAIO;AACL,aAAK,KAAL,CAAW,WAAX,CAAuB,GAAvB;AACD;AACF,KARD,CAQE,OAAO,KAAP,EAAc;AACd,aAAO,EAAE,CAAC,IAAI,KAAJ,CAAU,iCAAV,CAAD,CAAT;AACD;;AACD,WAAO,EAAE,EAAT;AACD;;AApE2C,CAA9C","sourceRoot":"","sourcesContent":["\"use strict\";\nconst stream_1 = require(\"stream\");\nmodule.exports = class PortDuplexStream extends stream_1.Duplex {\n    /**\n     * @param port - An instance of WebExtensions Runtime.Port. See:\n     * {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/Port}\n     */\n    constructor(port) {\n        super({ objectMode: true });\n        this._port = port;\n        this._port.onMessage.addListener((msg) => this._onMessage(msg));\n        this._port.onDisconnect.addListener(() => this._onDisconnect());\n    }\n    /**\n     * Callback triggered when a message is received from\n     * the remote Port associated with this Stream.\n     *\n     * @param msg - Payload from the onMessage listener of the port\n     */\n    _onMessage(msg) {\n        if (Buffer.isBuffer(msg)) {\n            const data = Buffer.from(msg);\n            this.push(data);\n        }\n        else {\n            this.push(msg);\n        }\n    }\n    /**\n     * Callback triggered when the remote Port associated with this Stream\n     * disconnects.\n     */\n    _onDisconnect() {\n        this.destroy();\n    }\n    /**\n     * Explicitly sets read operations to a no-op.\n     */\n    _read() {\n        return undefined;\n    }\n    /**\n     * Called internally when data should be written to this writable stream.\n     *\n     * @param msg - Arbitrary object to write\n     * @param encoding - Encoding to use when writing payload\n     * @param cb - Called when writing is complete or an error occurs\n     */\n    _write(msg, _encoding, cb) {\n        try {\n            if (Buffer.isBuffer(msg)) {\n                const data = msg.toJSON();\n                data._isBuffer = true;\n                this._port.postMessage(data);\n            }\n            else {\n                this._port.postMessage(msg);\n            }\n        }\n        catch (error) {\n            return cb(new Error('PortDuplexStream - disconnected'));\n        }\n        return cb();\n    }\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}