{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst varint_1 = __importDefault(require(\"varint\"));\n\nconst multibase_1 = __importDefault(require(\"multibase\"));\n\nconst secp256k1 = __importStar(require(\"./secp256k1\"));\n\nconst ed25519 = __importStar(require(\"./ed25519\"));\n\nconst DID_LD_JSON = 'application/did+ld+json';\nconst DID_JSON = 'application/did+json';\nconst prefixToDriverMap = {\n  0xE7: secp256k1,\n  0xED: ed25519\n};\nexports.default = {\n  getResolver: () => ({\n    'key': async (did, parsed, r, options) => {\n      const contentType = options.accept || DID_JSON;\n      const response = {\n        didResolutionMetadata: {\n          contentType\n        },\n        didDocument: null,\n        didDocumentMetadata: {}\n      };\n\n      try {\n        const multicodecPubKey = multibase_1.default.decode(parsed.id);\n        const keyType = varint_1.default.decode(multicodecPubKey);\n        const pubKeyBytes = multicodecPubKey.slice(varint_1.default.decode.bytes);\n        const doc = await prefixToDriverMap[keyType].keyToDidDoc(pubKeyBytes, parsed.id);\n\n        if (contentType === DID_LD_JSON) {\n          doc['@context'] = 'https://w3id.org/did/v1', response.didDocument = doc;\n        } else if (contentType === DID_JSON) {\n          response.didDocument = doc;\n        } else {\n          delete response.didResolutionMetadata.contentType;\n          response.didResolutionMetadata.error = 'representationNotSupported';\n        }\n      } catch (e) {\n        response.didResolutionMetadata.error = 'invalidDid';\n        response.didResolutionMetadata.message = e.toString();\n      }\n\n      return response;\n    }\n  })\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,MAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AASA,MAAA,SAAA,GAAA,YAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AACA,MAAA,OAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAEA,MAAM,WAAW,GAAG,yBAApB;AACA,MAAM,QAAQ,GAAG,sBAAjB;AAEA,MAAM,iBAAiB,GAAQ;AAC7B,QAAM,SADuB;AAE7B,QAAM;AAFuB,CAA/B;AAKA,OAAA,CAAA,OAAA,GAAe;AACb,EAAA,WAAW,EAAE,OAAyB;AACpC,WAAO,OAAO,GAAP,EAAoB,MAApB,EAAuC,CAAvC,EAAoD,OAApD,KAAmH;AACxH,YAAM,WAAW,GAAG,OAAO,CAAC,MAAR,IAAkB,QAAtC;AACA,YAAM,QAAQ,GAAwB;AACpC,QAAA,qBAAqB,EAAE;AAAE,UAAA;AAAF,SADa;AAEpC,QAAA,WAAW,EAAE,IAFuB;AAGpC,QAAA,mBAAmB,EAAE;AAHe,OAAtC;;AAKA,UAAI;AACF,cAAM,gBAAgB,GAAQ,WAAA,CAAA,OAAA,CAAU,MAAV,CAAiB,MAAM,CAAC,EAAxB,CAA9B;AACA,cAAM,OAAO,GAAG,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,gBAAd,CAAhB;AACA,cAAM,WAAW,GAAG,gBAAgB,CAAC,KAAjB,CAAuB,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,KAArC,CAApB;AACA,cAAM,GAAG,GAAG,MAAM,iBAAiB,CAAC,OAAD,CAAjB,CAA2B,WAA3B,CAAuC,WAAvC,EAAoD,MAAM,CAAC,EAA3D,CAAlB;;AACA,YAAI,WAAW,KAAK,WAApB,EAAiC;AAC/B,UAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,yBAAlB,EACA,QAAQ,CAAC,WAAT,GAAuB,GADvB;AAED,SAHD,MAGO,IAAI,WAAW,KAAK,QAApB,EAA8B;AACnC,UAAA,QAAQ,CAAC,WAAT,GAAuB,GAAvB;AACD,SAFM,MAEA;AACL,iBAAO,QAAQ,CAAC,qBAAT,CAA+B,WAAtC;AACA,UAAA,QAAQ,CAAC,qBAAT,CAA+B,KAA/B,GAAuC,4BAAvC;AACD;AACF,OAdD,CAcE,OAAO,CAAP,EAAU;AACV,QAAA,QAAQ,CAAC,qBAAT,CAA+B,KAA/B,GAAuC,YAAvC;AACA,QAAA,QAAQ,CAAC,qBAAT,CAA+B,OAA/B,GAAyC,CAAC,CAAC,QAAF,EAAzC;AACD;;AACD,aAAO,QAAP;AACD;AA3BmC,GAAzB;AADA,CAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst varint_1 = __importDefault(require(\"varint\"));\nconst multibase_1 = __importDefault(require(\"multibase\"));\nconst secp256k1 = __importStar(require(\"./secp256k1\"));\nconst ed25519 = __importStar(require(\"./ed25519\"));\nconst DID_LD_JSON = 'application/did+ld+json';\nconst DID_JSON = 'application/did+json';\nconst prefixToDriverMap = {\n    0xE7: secp256k1,\n    0xED: ed25519,\n};\nexports.default = {\n    getResolver: () => ({\n        'key': async (did, parsed, r, options) => {\n            const contentType = options.accept || DID_JSON;\n            const response = {\n                didResolutionMetadata: { contentType },\n                didDocument: null,\n                didDocumentMetadata: {}\n            };\n            try {\n                const multicodecPubKey = multibase_1.default.decode(parsed.id);\n                const keyType = varint_1.default.decode(multicodecPubKey);\n                const pubKeyBytes = multicodecPubKey.slice(varint_1.default.decode.bytes);\n                const doc = await prefixToDriverMap[keyType].keyToDidDoc(pubKeyBytes, parsed.id);\n                if (contentType === DID_LD_JSON) {\n                    doc['@context'] = 'https://w3id.org/did/v1',\n                        response.didDocument = doc;\n                }\n                else if (contentType === DID_JSON) {\n                    response.didDocument = doc;\n                }\n                else {\n                    delete response.didResolutionMetadata.contentType;\n                    response.didResolutionMetadata.error = 'representationNotSupported';\n                }\n            }\n            catch (e) {\n                response.didResolutionMetadata.error = 'invalidDid';\n                response.didResolutionMetadata.message = e.toString();\n            }\n            return response;\n        }\n    })\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}