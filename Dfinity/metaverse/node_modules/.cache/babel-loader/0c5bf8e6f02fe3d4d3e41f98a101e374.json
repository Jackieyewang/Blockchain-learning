{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamUtils = void 0;\n\nconst cids_1 = __importDefault(require(\"cids\"));\n\nconst lodash_clonedeep_1 = __importDefault(require(\"lodash.clonedeep\"));\n\nconst u8a = __importStar(require(\"uint8arrays\"));\n\nconst stream_1 = require(\"../stream\");\n\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\n\nclass StreamUtils {\n  static serializeCommit(commit) {\n    const cloned = lodash_clonedeep_1.default(commit);\n\n    if (StreamUtils.isSignedCommitContainer(cloned)) {\n      cloned.jws.link = cloned.jws.link.toString();\n      cloned.linkedBlock = u8a.toString(cloned.linkedBlock, 'base64');\n      return cloned;\n    }\n\n    if (StreamUtils.isSignedCommit(commit)) {\n      cloned.link = cloned.link.toString();\n    }\n\n    if (StreamUtils.isAnchorCommit(commit)) {\n      cloned.proof = cloned.proof.toString();\n    }\n\n    if (cloned.id) {\n      cloned.id = cloned.id.toString();\n    }\n\n    if (cloned.prev) {\n      cloned.prev = cloned.prev.toString();\n    }\n\n    return cloned;\n  }\n\n  static deserializeCommit(commit) {\n    const cloned = lodash_clonedeep_1.default(commit);\n\n    if (StreamUtils.isSignedCommitContainer(cloned)) {\n      cloned.jws.link = new cids_1.default(cloned.jws.link);\n      cloned.linkedBlock = u8a.fromString(cloned.linkedBlock, 'base64');\n      return cloned;\n    }\n\n    if (StreamUtils.isSignedCommit(cloned)) {\n      cloned.link = new cids_1.default(cloned.link);\n    }\n\n    if (StreamUtils.isAnchorCommit(cloned)) {\n      cloned.proof = new cids_1.default(cloned.proof);\n    }\n\n    if (cloned.id) {\n      cloned.id = new cids_1.default(cloned.id);\n    }\n\n    if (cloned.prev) {\n      cloned.prev = new cids_1.default(cloned.prev);\n    }\n\n    return cloned;\n  }\n\n  static serializeState(state) {\n    const cloned = lodash_clonedeep_1.default(state);\n    cloned.log = cloned.log.map(entry => ({ ...entry,\n      cid: entry.cid.toString()\n    }));\n\n    if (cloned.anchorStatus != null) {\n      cloned.anchorStatus = stream_1.AnchorStatus[cloned.anchorStatus];\n    }\n\n    if (cloned.anchorScheduledFor != null) {\n      cloned.anchorScheduledFor = new Date(cloned.anchorScheduledFor).toISOString();\n    }\n\n    if (cloned.anchorProof != null) {\n      cloned.anchorProof.txHash = cloned.anchorProof.txHash.toString();\n      cloned.anchorProof.root = cloned.anchorProof.root.toString();\n    }\n\n    if (cloned.lastAnchored != null) {\n      cloned.lastAnchored = cloned.lastAnchored.toString();\n    }\n\n    cloned.doctype = streamid_1.StreamType.nameByCode(cloned.type);\n    return cloned;\n  }\n\n  static deserializeState(state) {\n    const cloned = lodash_clonedeep_1.default(state);\n\n    if (cloned.doctype) {\n      cloned.type = streamid_1.StreamType.codeByName(cloned.doctype);\n      delete cloned.doctype;\n    }\n\n    cloned.log = cloned.log.map(entry => ({ ...entry,\n      cid: new cids_1.default(entry.cid)\n    }));\n\n    if (cloned.anchorProof) {\n      cloned.anchorProof.txHash = new cids_1.default(cloned.anchorProof.txHash);\n      cloned.anchorProof.root = new cids_1.default(cloned.anchorProof.root);\n    }\n\n    let showScheduledFor = true;\n\n    if (cloned.anchorStatus) {\n      cloned.anchorStatus = stream_1.AnchorStatus[cloned.anchorStatus];\n      showScheduledFor = cloned.anchorStatus !== stream_1.AnchorStatus.FAILED && cloned.anchorStatus !== stream_1.AnchorStatus.ANCHORED;\n    }\n\n    if (cloned.anchorScheduledFor) {\n      if (showScheduledFor) {\n        cloned.anchorScheduledFor = Date.parse(cloned.anchorScheduledFor);\n      } else {\n        delete cloned.anchorScheduledFor;\n      }\n    }\n\n    if (cloned.lastAnchored) {\n      cloned.lastAnchored = new cids_1.default(cloned.lastAnchored);\n    }\n\n    return cloned;\n  }\n\n  static statesEqual(state1, state2) {\n    return JSON.stringify(StreamUtils.serializeState(state1)) === JSON.stringify(StreamUtils.serializeState(state2));\n  }\n\n  static isStateSupersetOf(state, base) {\n    if (state.log.length < base.log.length) {\n      return false;\n    }\n\n    for (const i in base.log) {\n      if (!state.log[i].cid.equals(base.log[i].cid)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static async convertCommitToSignedCommitContainer(commit, ipfs) {\n    if (StreamUtils.isSignedCommit(commit)) {\n      const block = await ipfs.block.get(commit.link);\n      return {\n        jws: commit,\n        linkedBlock: block.data\n      };\n    }\n\n    return commit;\n  }\n\n  static isSignedCommitContainer(commit) {\n    return commit && commit.jws !== undefined;\n  }\n\n  static isSignedCommit(commit) {\n    return commit && commit.link !== undefined;\n  }\n\n  static isAnchorCommit(commit) {\n    return commit && commit.proof !== undefined;\n  }\n\n}\n\nexports.StreamUtils = StreamUtils;","map":{"version":3,"sources":["../../src/utils/stream-utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamUtils = void 0;\nconst cids_1 = __importDefault(require(\"cids\"));\nconst lodash_clonedeep_1 = __importDefault(require(\"lodash.clonedeep\"));\nconst u8a = __importStar(require(\"uint8arrays\"));\nconst stream_1 = require(\"../stream\");\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\nclass StreamUtils {\n    static serializeCommit(commit) {\n        const cloned = lodash_clonedeep_1.default(commit);\n        if (StreamUtils.isSignedCommitContainer(cloned)) {\n            cloned.jws.link = cloned.jws.link.toString();\n            cloned.linkedBlock = u8a.toString(cloned.linkedBlock, 'base64');\n            return cloned;\n        }\n        if (StreamUtils.isSignedCommit(commit)) {\n            cloned.link = cloned.link.toString();\n        }\n        if (StreamUtils.isAnchorCommit(commit)) {\n            cloned.proof = cloned.proof.toString();\n        }\n        if (cloned.id) {\n            cloned.id = cloned.id.toString();\n        }\n        if (cloned.prev) {\n            cloned.prev = cloned.prev.toString();\n        }\n        return cloned;\n    }\n    static deserializeCommit(commit) {\n        const cloned = lodash_clonedeep_1.default(commit);\n        if (StreamUtils.isSignedCommitContainer(cloned)) {\n            cloned.jws.link = new cids_1.default(cloned.jws.link);\n            cloned.linkedBlock = u8a.fromString(cloned.linkedBlock, 'base64');\n            return cloned;\n        }\n        if (StreamUtils.isSignedCommit(cloned)) {\n            cloned.link = new cids_1.default(cloned.link);\n        }\n        if (StreamUtils.isAnchorCommit(cloned)) {\n            cloned.proof = new cids_1.default(cloned.proof);\n        }\n        if (cloned.id) {\n            cloned.id = new cids_1.default(cloned.id);\n        }\n        if (cloned.prev) {\n            cloned.prev = new cids_1.default(cloned.prev);\n        }\n        return cloned;\n    }\n    static serializeState(state) {\n        const cloned = lodash_clonedeep_1.default(state);\n        cloned.log = cloned.log.map((entry) => ({ ...entry, cid: entry.cid.toString() }));\n        if (cloned.anchorStatus != null) {\n            cloned.anchorStatus = stream_1.AnchorStatus[cloned.anchorStatus];\n        }\n        if (cloned.anchorScheduledFor != null) {\n            cloned.anchorScheduledFor = new Date(cloned.anchorScheduledFor).toISOString();\n        }\n        if (cloned.anchorProof != null) {\n            cloned.anchorProof.txHash = cloned.anchorProof.txHash.toString();\n            cloned.anchorProof.root = cloned.anchorProof.root.toString();\n        }\n        if (cloned.lastAnchored != null) {\n            cloned.lastAnchored = cloned.lastAnchored.toString();\n        }\n        cloned.doctype = streamid_1.StreamType.nameByCode(cloned.type);\n        return cloned;\n    }\n    static deserializeState(state) {\n        const cloned = lodash_clonedeep_1.default(state);\n        if (cloned.doctype) {\n            cloned.type = streamid_1.StreamType.codeByName(cloned.doctype);\n            delete cloned.doctype;\n        }\n        cloned.log = cloned.log.map((entry) => ({ ...entry, cid: new cids_1.default(entry.cid) }));\n        if (cloned.anchorProof) {\n            cloned.anchorProof.txHash = new cids_1.default(cloned.anchorProof.txHash);\n            cloned.anchorProof.root = new cids_1.default(cloned.anchorProof.root);\n        }\n        let showScheduledFor = true;\n        if (cloned.anchorStatus) {\n            cloned.anchorStatus = stream_1.AnchorStatus[cloned.anchorStatus];\n            showScheduledFor = cloned.anchorStatus !== stream_1.AnchorStatus.FAILED && cloned.anchorStatus !== stream_1.AnchorStatus.ANCHORED;\n        }\n        if (cloned.anchorScheduledFor) {\n            if (showScheduledFor) {\n                cloned.anchorScheduledFor = Date.parse(cloned.anchorScheduledFor);\n            }\n            else {\n                delete cloned.anchorScheduledFor;\n            }\n        }\n        if (cloned.lastAnchored) {\n            cloned.lastAnchored = new cids_1.default(cloned.lastAnchored);\n        }\n        return cloned;\n    }\n    static statesEqual(state1, state2) {\n        return JSON.stringify(StreamUtils.serializeState(state1)) ===\n            JSON.stringify(StreamUtils.serializeState(state2));\n    }\n    static isStateSupersetOf(state, base) {\n        if (state.log.length < base.log.length) {\n            return false;\n        }\n        for (const i in base.log) {\n            if (!state.log[i].cid.equals(base.log[i].cid)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static async convertCommitToSignedCommitContainer(commit, ipfs) {\n        if (StreamUtils.isSignedCommit(commit)) {\n            const block = await ipfs.block.get(commit.link);\n            return {\n                jws: commit,\n                linkedBlock: block.data,\n            };\n        }\n        return commit;\n    }\n    static isSignedCommitContainer(commit) {\n        return commit && commit.jws !== undefined;\n    }\n    static isSignedCommit(commit) {\n        return commit && commit.link !== undefined;\n    }\n    static isAnchorCommit(commit) {\n        return commit && commit.proof !== undefined;\n    }\n}\nexports.StreamUtils = StreamUtils;\n//# sourceMappingURL=stream-utils.js.map"]},"metadata":{},"sourceType":"script"}