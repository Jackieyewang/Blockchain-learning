{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Document = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst common_1 = require(\"@ceramicnetwork/common\");\n\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\n\nconst query_string_1 = __importDefault(require(\"query-string\"));\n\nclass Document extends rxjs_1.Observable {\n  constructor(initial, _apiUrl, syncInterval) {\n    super(subscriber => {\n      const isFirstObserver = this.state$.observers.length === 0;\n\n      if (isFirstObserver) {\n        this.periodicSubscription = rxjs_1.timer(0, syncInterval).pipe(operators_1.throttle(() => this._syncState(this.id, {\n          sync: common_1.SyncOptions.PREFER_CACHE\n        }))).subscribe();\n      }\n\n      this.state$.subscribe(subscriber).add(() => {\n        var _a;\n\n        const isNoObserversLeft = this.state$.observers.length === 0;\n\n        if (isNoObserversLeft) {\n          (_a = this.periodicSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        }\n      });\n    });\n    this._apiUrl = _apiUrl;\n    this.state$ = new common_1.StreamStateSubject(initial);\n  }\n\n  get value() {\n    return this.state$.value;\n  }\n\n  get state() {\n    return this.state$.value;\n  }\n\n  next(state) {\n    this.state$.next(state);\n  }\n\n  async _syncState(streamId, opts) {\n    const state = await Document._load(streamId, this._apiUrl, opts);\n    this.state$.next(common_1.StreamUtils.deserializeState(state));\n  }\n\n  get id() {\n    return new streamid_1.StreamID(this.state$.value.type, this.state$.value.log[0].cid);\n  }\n\n  static async createFromGenesis(apiUrl, type, genesis, opts, syncInterval) {\n    const {\n      state\n    } = await common_1.fetchJson(apiUrl + '/streams', {\n      method: 'post',\n      body: {\n        type,\n        genesis: common_1.StreamUtils.serializeCommit(genesis),\n        opts\n      }\n    });\n    return new Document(common_1.StreamUtils.deserializeState(state), apiUrl, syncInterval);\n  }\n\n  static async applyCommit(apiUrl, streamId, commit, opts, syncInterval) {\n    const {\n      state\n    } = await common_1.fetchJson(apiUrl + '/commits', {\n      method: 'post',\n      body: {\n        streamId: streamId.toString(),\n        commit: common_1.StreamUtils.serializeCommit(commit),\n        opts\n      }\n    });\n    return new Document(common_1.StreamUtils.deserializeState(state), apiUrl, syncInterval);\n  }\n\n  static async _load(streamId, apiUrl, opts) {\n    const url = apiUrl + '/streams/' + streamId.toString() + '?' + query_string_1.default.stringify(opts);\n    const {\n      state\n    } = await common_1.fetchJson(url);\n    return state;\n  }\n\n  static async load(streamId, apiUrl, syncInterval, opts) {\n    const state = await Document._load(streamId, apiUrl, opts);\n    return new Document(common_1.StreamUtils.deserializeState(state), apiUrl, syncInterval);\n  }\n\n  static async loadStreamCommits(streamId, apiUrl) {\n    const {\n      commits\n    } = await common_1.fetchJson(`${apiUrl}/commits/${streamId}`);\n    return commits.map(r => {\n      return {\n        cid: r.cid,\n        value: common_1.StreamUtils.deserializeCommit(r.value)\n      };\n    });\n  }\n\n  complete() {\n    this.state$.complete();\n  }\n\n}\n\nexports.Document = Document;","map":{"version":3,"sources":["../src/document.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Document = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst common_1 = require(\"@ceramicnetwork/common\");\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\nconst query_string_1 = __importDefault(require(\"query-string\"));\nclass Document extends rxjs_1.Observable {\n    constructor(initial, _apiUrl, syncInterval) {\n        super(subscriber => {\n            const isFirstObserver = this.state$.observers.length === 0;\n            if (isFirstObserver) {\n                this.periodicSubscription = rxjs_1.timer(0, syncInterval).pipe(operators_1.throttle(() => this._syncState(this.id, { sync: common_1.SyncOptions.PREFER_CACHE }))).subscribe();\n            }\n            this.state$.subscribe(subscriber).add(() => {\n                var _a;\n                const isNoObserversLeft = this.state$.observers.length === 0;\n                if (isNoObserversLeft) {\n                    (_a = this.periodicSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n                }\n            });\n        });\n        this._apiUrl = _apiUrl;\n        this.state$ = new common_1.StreamStateSubject(initial);\n    }\n    get value() {\n        return this.state$.value;\n    }\n    get state() {\n        return this.state$.value;\n    }\n    next(state) {\n        this.state$.next(state);\n    }\n    async _syncState(streamId, opts) {\n        const state = await Document._load(streamId, this._apiUrl, opts);\n        this.state$.next(common_1.StreamUtils.deserializeState(state));\n    }\n    get id() {\n        return new streamid_1.StreamID(this.state$.value.type, this.state$.value.log[0].cid);\n    }\n    static async createFromGenesis(apiUrl, type, genesis, opts, syncInterval) {\n        const { state } = await common_1.fetchJson(apiUrl + '/streams', {\n            method: 'post',\n            body: {\n                type,\n                genesis: common_1.StreamUtils.serializeCommit(genesis),\n                opts,\n            }\n        });\n        return new Document(common_1.StreamUtils.deserializeState(state), apiUrl, syncInterval);\n    }\n    static async applyCommit(apiUrl, streamId, commit, opts, syncInterval) {\n        const { state } = await common_1.fetchJson(apiUrl + '/commits', {\n            method: 'post',\n            body: {\n                streamId: streamId.toString(),\n                commit: common_1.StreamUtils.serializeCommit(commit),\n                opts,\n            }\n        });\n        return new Document(common_1.StreamUtils.deserializeState(state), apiUrl, syncInterval);\n    }\n    static async _load(streamId, apiUrl, opts) {\n        const url = apiUrl + '/streams/' + streamId.toString() + '?' + query_string_1.default.stringify(opts);\n        const { state } = await common_1.fetchJson(url);\n        return state;\n    }\n    static async load(streamId, apiUrl, syncInterval, opts) {\n        const state = await Document._load(streamId, apiUrl, opts);\n        return new Document(common_1.StreamUtils.deserializeState(state), apiUrl, syncInterval);\n    }\n    static async loadStreamCommits(streamId, apiUrl) {\n        const { commits } = await common_1.fetchJson(`${apiUrl}/commits/${streamId}`);\n        return commits.map((r) => {\n            return {\n                cid: r.cid, value: common_1.StreamUtils.deserializeCommit(r.value)\n            };\n        });\n    }\n    complete() {\n        this.state$.complete();\n    }\n}\nexports.Document = Document;\n//# sourceMappingURL=document.js.map"]},"metadata":{},"sourceType":"script"}