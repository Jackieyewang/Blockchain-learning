{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TestUtils = void 0;\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\n\nclass FakeRunningState extends rxjs_1.BehaviorSubject {\n  constructor(value) {\n    super(value);\n    this.state = this.value;\n    this.id = new streamid_1.StreamID(this.state.type, this.state.log[0].cid);\n  }\n\n}\n\nclass TestUtils {\n  static registerChangeListener(stream) {\n    return stream.pipe(operators_1.take(1)).toPromise();\n  }\n\n  static async waitForState(stream, timeout, predicate, onFailure) {\n    if (predicate(stream.state)) return;\n    const timeoutPromise = new Promise(resolve => setTimeout(resolve, timeout));\n    const completionPromise = stream.pipe(operators_1.filter(state => predicate(state))).toPromise();\n    await Promise.race([timeoutPromise, completionPromise]);\n\n    if (!predicate(stream.state)) {\n      onFailure();\n    }\n  }\n\n  static runningState(state) {\n    return new FakeRunningState(state);\n  }\n\n}\n\nexports.TestUtils = TestUtils;","map":{"version":3,"sources":["../../src/utils/test-utils.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAEA,MAAM,gBAAN,SAA+B,MAAA,CAAA,eAA/B,CAA2D;AAIzD,EAAA,WAAA,CAAY,KAAZ,EAA8B;AAC5B,UAAM,KAAN;AACA,SAAK,KAAL,GAAa,KAAK,KAAlB;AACA,SAAK,EAAL,GAAU,IAAI,UAAA,CAAA,QAAJ,CAAa,KAAK,KAAL,CAAW,IAAxB,EAA8B,KAAK,KAAL,CAAW,GAAX,CAAe,CAAf,EAAkB,GAAhD,CAAV;AACD;;AARwD;;AAW3D,MAAa,SAAb,CAAsB;AAMW,SAAtB,sBAAsB,CAAC,MAAD,EAAe;AACxC,WAAO,MAAM,CAAC,IAAP,CAAY,WAAA,CAAA,IAAA,CAAK,CAAL,CAAZ,EAAqB,SAArB,EAAP;AACH;;AAUwB,eAAZ,YAAY,CAAC,MAAD,EACC,OADD,EAEC,SAFD,EAGC,SAHD,EAGsB;AAC3C,QAAI,SAAS,CAAC,MAAM,CAAC,KAAR,CAAb,EAA6B;AAC7B,UAAM,cAAc,GAAG,IAAI,OAAJ,CAAY,OAAO,IAAI,UAAU,CAAC,OAAD,EAAU,OAAV,CAAjC,CAAvB;AACA,UAAM,iBAAiB,GAAG,MAAM,CAAC,IAAP,CAAY,WAAA,CAAA,MAAA,CAAO,KAAK,IAAI,SAAS,CAAC,KAAD,CAAzB,CAAZ,EAA+C,SAA/C,EAA1B;AACA,UAAM,OAAO,CAAC,IAAR,CAAa,CAAC,cAAD,EAAiB,iBAAjB,CAAb,CAAN;;AACA,QAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAR,CAAd,EAA8B;AAC1B,MAAA,SAAS;AACZ;AACJ;;AAEkB,SAAZ,YAAY,CAAC,KAAD,EAAmB;AACpC,WAAO,IAAI,gBAAJ,CAAqB,KAArB,CAAP;AACD;;AAjCiB;;AAAtB,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TestUtils = void 0;\nconst operators_1 = require(\"rxjs/operators\");\nconst rxjs_1 = require(\"rxjs\");\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\nclass FakeRunningState extends rxjs_1.BehaviorSubject {\n    constructor(value) {\n        super(value);\n        this.state = this.value;\n        this.id = new streamid_1.StreamID(this.state.type, this.state.log[0].cid);\n    }\n}\nclass TestUtils {\n    static registerChangeListener(stream) {\n        return stream.pipe(operators_1.take(1)).toPromise();\n    }\n    static async waitForState(stream, timeout, predicate, onFailure) {\n        if (predicate(stream.state))\n            return;\n        const timeoutPromise = new Promise(resolve => setTimeout(resolve, timeout));\n        const completionPromise = stream.pipe(operators_1.filter(state => predicate(state))).toPromise();\n        await Promise.race([timeoutPromise, completionPromise]);\n        if (!predicate(stream.state)) {\n            onFailure();\n        }\n    }\n    static runningState(state) {\n        return new FakeRunningState(state);\n    }\n}\nexports.TestUtils = TestUtils;\n//# sourceMappingURL=test-utils.js.map"]},"metadata":{},"sourceType":"script"}