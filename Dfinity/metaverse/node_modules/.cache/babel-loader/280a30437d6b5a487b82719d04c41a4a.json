{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver';\nimport ThreeIdDidProvider from '3id-did-provider';\nimport { EthereumAuthProvider, ThreeIdConnect } from '@3id/connect';\nimport { DID } from 'dids';\nexport function createThreeIdFromSeed({\n  ceramic,\n  seed\n}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const threeIdProvider = yield ThreeIdDidProvider.create({\n      // @ts-ignore\n      ceramic,\n      getPermission: () => __awaiter(this, void 0, void 0, function* () {\n        return [];\n      }),\n      seed\n    });\n    const didProvider = threeIdProvider.getDidProvider();\n    return didProvider;\n  });\n}\nexport function createThreeIdFromEthereumProvider({\n  threeIdConnectHost,\n  ethereumProvider,\n  address\n}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const ethereumAuthProvider = new EthereumAuthProvider(ethereumProvider, address);\n    const threeIdConnect = new ThreeIdConnect();\n    yield threeIdConnect.connect(ethereumAuthProvider);\n    const didProvider = threeIdConnect.getDidProvider();\n    return didProvider;\n  });\n}\nexport function authenticate({\n  ceramic,\n  didProvider\n}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const did = new DID({\n      provider: didProvider,\n      // @ts-ignore\n      resolver: ThreeIdResolver.getResolver(ceramic)\n    });\n    yield ceramic.setDID(did);\n    yield did.authenticate();\n  });\n}","map":{"version":3,"sources":["/Users/apple/Documents/ownership/Datadidi/test/DataDiDi/packages/idx-common/lib/esm/apis/threeId.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ThreeIdResolver","ThreeIdDidProvider","EthereumAuthProvider","ThreeIdConnect","DID","createThreeIdFromSeed","ceramic","seed","threeIdProvider","create","getPermission","didProvider","getDidProvider","createThreeIdFromEthereumProvider","threeIdConnectHost","ethereumProvider","address","ethereumAuthProvider","threeIdConnect","connect","authenticate","did","provider","resolver","getResolver","setDID"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver';\nimport ThreeIdDidProvider from '3id-did-provider';\nimport { EthereumAuthProvider, ThreeIdConnect } from '@3id/connect';\nimport { DID } from 'dids';\nexport function createThreeIdFromSeed({ ceramic, seed, }) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const threeIdProvider = yield ThreeIdDidProvider.create({\n            // @ts-ignore\n            ceramic,\n            getPermission: () => __awaiter(this, void 0, void 0, function* () { return []; }),\n            seed,\n        });\n        const didProvider = threeIdProvider.getDidProvider();\n        return didProvider;\n    });\n}\nexport function createThreeIdFromEthereumProvider({ threeIdConnectHost, ethereumProvider, address, }) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const ethereumAuthProvider = new EthereumAuthProvider(ethereumProvider, address);\n        const threeIdConnect = new ThreeIdConnect();\n        yield threeIdConnect.connect(ethereumAuthProvider);\n        const didProvider = threeIdConnect.getDidProvider();\n        return didProvider;\n    });\n}\nexport function authenticate({ ceramic, didProvider }) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const did = new DID({\n            provider: didProvider,\n            // @ts-ignore\n            resolver: ThreeIdResolver.getResolver(ceramic),\n        });\n        yield ceramic.setDID(did);\n        yield did.authenticate();\n    });\n}\n"]},"metadata":{},"sourceType":"module"}