{"ast":null,"code":"import WalletConnectProvider from '@walletconnect/web3-provider';\nimport createMetaMaskProvider from 'metamask-extension-provider';\nimport Fortmatic from 'fortmatic';\nimport Web3Modal from 'web3modal';\nconst web3Modal = new Web3Modal({\n  network: process.env.REACT_APP_WEB3_NETWORK,\n  cacheProvider: true,\n  disableInjectedProvider: false,\n  providerOptions: {\n    'custom-metamask': {\n      display: {\n        name: 'MetaMask',\n        description: 'Connect with MetaMask'\n      },\n      package: createMetaMaskProvider,\n      connector: async createMetaMaskProvider => {\n        const provider = createMetaMaskProvider();\n        await provider.request({\n          method: 'eth_requestAccounts'\n        });\n      }\n    },\n    fortmatic: {\n      package: Fortmatic,\n      options: {\n        key: process.env.REACT_APP_FORTMATIC_KEY\n      }\n    },\n    walletconnect: {\n      package: WalletConnectProvider,\n      options: {\n        infuraId: process.env.REACT_APP_INFURA_PROJECT_ID\n      }\n    }\n  }\n});\nexport async function connectWithWeb3() {\n  const provider = await web3Modal.connect();\n  const addresses = await provider.request({\n    method: 'eth_requestAccounts'\n  });\n  return {\n    provider,\n    addresses\n  };\n}","map":{"version":3,"sources":["/Users/apple/Documents/ownership/Datadidi/test/DataDiDi/packages/metaverse/src/apis/web3.ts"],"names":["WalletConnectProvider","createMetaMaskProvider","Fortmatic","Web3Modal","web3Modal","network","process","env","REACT_APP_WEB3_NETWORK","cacheProvider","disableInjectedProvider","providerOptions","display","name","description","package","connector","provider","request","method","fortmatic","options","key","REACT_APP_FORTMATIC_KEY","walletconnect","infuraId","REACT_APP_INFURA_PROJECT_ID","connectWithWeb3","connect","addresses"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,8BAAlC;AACA,OAAOC,sBAAP,MAAmC,6BAAnC;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,MAAMC,SAAS,GAAG,IAAID,SAAJ,CAAc;AAC9BE,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,sBADS;AAE9BC,EAAAA,aAAa,EAAE,IAFe;AAG9BC,EAAAA,uBAAuB,EAAE,KAHK;AAI9BC,EAAAA,eAAe,EAAE;AACf,uBAAmB;AACjBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,UADC;AAEPC,QAAAA,WAAW,EAAE;AAFN,OADQ;AAKjBC,MAAAA,OAAO,EAAEd,sBALQ;AAMjBe,MAAAA,SAAS,EAAE,MAAOf,sBAAP,IAAkC;AAC3C,cAAMgB,QAAQ,GAAGhB,sBAAsB,EAAvC;AACA,cAAMgB,QAAQ,CAACC,OAAT,CAAiB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAjB,CAAN;AACD;AATgB,KADJ;AAYfC,IAAAA,SAAS,EAAE;AACTL,MAAAA,OAAO,EAAEb,SADA;AAETmB,MAAAA,OAAO,EAAE;AACPC,QAAAA,GAAG,EAAEhB,OAAO,CAACC,GAAR,CAAYgB;AADV;AAFA,KAZI;AAkBfC,IAAAA,aAAa,EAAE;AACbT,MAAAA,OAAO,EAAEf,qBADI;AAEbqB,MAAAA,OAAO,EAAE;AACPI,QAAAA,QAAQ,EAAEnB,OAAO,CAACC,GAAR,CAAYmB;AADf;AAFI;AAlBA;AAJa,CAAd,CAAlB;AA+BA,OAAO,eAAeC,eAAf,GAAkC;AACvC,QAAMV,QAAQ,GAAG,MAAMb,SAAS,CAACwB,OAAV,EAAvB;AACA,QAAMC,SAAS,GAAI,MAAMZ,QAAQ,CAACC,OAAT,CAAiB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAjB,CAAzB;AAEA,SAAO;AACLF,IAAAA,QADK;AAELY,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import WalletConnectProvider from '@walletconnect/web3-provider';\nimport createMetaMaskProvider from 'metamask-extension-provider';\nimport Fortmatic from 'fortmatic';\nimport Web3Modal from 'web3modal';\n\nconst web3Modal = new Web3Modal({\n  network: process.env.REACT_APP_WEB3_NETWORK!,\n  cacheProvider: true,\n  disableInjectedProvider: false,\n  providerOptions: {\n    'custom-metamask': {\n      display: {\n        name: 'MetaMask',\n        description: 'Connect with MetaMask'\n      },\n      package: createMetaMaskProvider,\n      connector: async (createMetaMaskProvider) => {\n        const provider = createMetaMaskProvider();\n        await provider.request({ method: 'eth_requestAccounts' });\n      }\n    },\n    fortmatic: {\n      package: Fortmatic,\n      options: {\n        key: process.env.REACT_APP_FORTMATIC_KEY\n      }\n    },\n    walletconnect: {\n      package: WalletConnectProvider,\n      options: {\n        infuraId: process.env.REACT_APP_INFURA_PROJECT_ID\n      }\n    }\n  }\n});\n\nexport async function connectWithWeb3 () {\n  const provider = await web3Modal.connect();\n  const addresses = (await provider.request({ method: 'eth_requestAccounts' })) as Array<string>;\n\n  return {\n    provider,\n    addresses\n  };\n}\n"]},"metadata":{},"sourceType":"module"}