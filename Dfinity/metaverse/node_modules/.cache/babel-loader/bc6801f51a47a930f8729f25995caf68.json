{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nconst readable_stream_1 = require(\"readable-stream\");\n/**\n * Creates a JsonRpcEngine middleware with an associated Duplex stream and\n * EventEmitter. The middleware, and by extension stream, assume that middleware\n * parameters are properly formatted. No runtime type checking or validation is\n * performed.\n *\n * @returns The event emitter, middleware, and stream.\n */\n\n\nfunction createStreamMiddleware() {\n  const idMap = {};\n  const stream = new readable_stream_1.Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n  const events = new safe_event_emitter_1.default();\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n\n  function readNoop() {\n    return false;\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit('notification', res);\n  }\n}\n\nexports.default = createStreamMiddleware;","map":{"version":3,"sources":["../src/createStreamMiddleware.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAA,oBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,8BAAA,CAAA,CAAA;;AACA,MAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAqBA;;;;;;;AAOG;;;AACH,SAAwB,sBAAxB,GAA8C;AAC5C,QAAM,KAAK,GAAU,EAArB;AACA,QAAM,MAAM,GAAG,IAAI,iBAAA,CAAA,MAAJ,CAAW;AACxB,IAAA,UAAU,EAAE,IADY;AAExB,IAAA,IAAI,EAAE,QAFkB;AAGxB,IAAA,KAAK,EAAE;AAHiB,GAAX,CAAf;AAMA,QAAM,MAAM,GAAG,IAAI,oBAAA,CAAA,OAAJ,EAAf;;AAEA,QAAM,UAAU,GAAwC,CACtD,GADsD,EAEtD,GAFsD,EAGtD,IAHsD,EAItD,GAJsD,KAKpD;AACF;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,EAFE,CAGF;;AACA,IAAA,KAAK,CAAE,GAAG,CAAC,EAAN,CAAL,GAAuC;AAAE,MAAA,GAAF;AAAO,MAAA,GAAP;AAAY,MAAA,IAAZ;AAAkB,MAAA;AAAlB,KAAvC;AACD,GAVD;;AAYA,SAAO;AAAE,IAAA,MAAF;AAAU,IAAA,UAAV;AAAsB,IAAA;AAAtB,GAAP;;AAEA,WAAS,QAAT,GAAiB;AACf,WAAO,KAAP;AACD;;AAED,WAAS,cAAT,CACE,GADF,EAEE,SAFF,EAGE,EAHF,EAGoC;AAElC,QAAI,GAAJ;;AACA,QAAI;AACF,YAAM,cAAc,GAAG,CAAC,GAAG,CAAC,EAA5B;;AACA,UAAI,cAAJ,EAAoB;AAClB,QAAA,mBAAmB,CAAE,GAAF,CAAnB;AACD,OAFD,MAEO;AACL,QAAA,eAAe,CAAC,GAAD,CAAf;AACD;AACF,KAPD,CAOE,OAAO,IAAP,EAAa;AACb,MAAA,GAAG,GAAG,IAAN;AACD,KAZiC,CAalC;;;AACA,IAAA,EAAE,CAAC,GAAD,CAAF;AACD;;AAED,WAAS,eAAT,CAAyB,GAAzB,EAA6D;AAC3D,UAAM,OAAO,GAAG,KAAK,CAAE,GAAG,CAAC,EAAN,CAArB;;AACA,QAAI,CAAC,OAAL,EAAc;AACZ,YAAM,IAAI,KAAJ,CAAU,2CAA2C,GAAG,CAAC,EAAE,GAA3D,CAAN;AACD;;AAED,WAAO,KAAK,CAAE,GAAG,CAAC,EAAN,CAAZ,CAN2D,CAO3D;;AACA,IAAA,MAAM,CAAC,MAAP,CAAc,OAAO,CAAC,GAAtB,EAA2B,GAA3B,EAR2D,CAS3D;AACA;;AACA,IAAA,UAAU,CAAC,OAAO,CAAC,GAAT,CAAV;AACD;;AAED,WAAS,mBAAT,CAA6B,GAA7B,EAA8D;AAC5D,IAAA,MAAM,CAAC,IAAP,CAAY,cAAZ,EAA4B,GAA5B;AACD;AACF;;AAjED,OAAA,CAAA,OAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst readable_stream_1 = require(\"readable-stream\");\n/**\n * Creates a JsonRpcEngine middleware with an associated Duplex stream and\n * EventEmitter. The middleware, and by extension stream, assume that middleware\n * parameters are properly formatted. No runtime type checking or validation is\n * performed.\n *\n * @returns The event emitter, middleware, and stream.\n */\nfunction createStreamMiddleware() {\n    const idMap = {};\n    const stream = new readable_stream_1.Duplex({\n        objectMode: true,\n        read: readNoop,\n        write: processMessage,\n    });\n    const events = new safe_event_emitter_1.default();\n    const middleware = (req, res, next, end) => {\n        // write req to stream\n        stream.push(req);\n        // register request on id map\n        idMap[req.id] = { req, res, next, end };\n    };\n    return { events, middleware, stream };\n    function readNoop() {\n        return false;\n    }\n    function processMessage(res, _encoding, cb) {\n        let err;\n        try {\n            const isNotification = !res.id;\n            if (isNotification) {\n                processNotification(res);\n            }\n            else {\n                processResponse(res);\n            }\n        }\n        catch (_err) {\n            err = _err;\n        }\n        // continue processing stream\n        cb(err);\n    }\n    function processResponse(res) {\n        const context = idMap[res.id];\n        if (!context) {\n            throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n        }\n        delete idMap[res.id];\n        // copy whole res onto original res\n        Object.assign(context.res, res);\n        // run callback on empty stack,\n        // prevent internal stream-handler from catching errors\n        setTimeout(context.end);\n    }\n    function processNotification(res) {\n        events.emit('notification', res);\n    }\n}\nexports.default = createStreamMiddleware;\n//# sourceMappingURL=createStreamMiddleware.js.map"]},"metadata":{},"sourceType":"script"}