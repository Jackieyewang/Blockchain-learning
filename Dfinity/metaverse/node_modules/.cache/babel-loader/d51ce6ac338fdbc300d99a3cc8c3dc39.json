{"ast":null,"code":"import { schemas, definitions } from '../constants';\nexport function getDefaultCollections(DefaultCollectionKey = []) {\n  return DefaultCollectionKey.reduce((defaultCollections, defaultKey) => Object.assign(Object.assign({}, defaultCollections), {\n    [defaultKey]: []\n  }), {});\n}\nexport function getSchemaNameByDocID(docID) {\n  return findRecordKeyByValue(schemas, docID);\n}\nexport function getDefinitionNameByDocID(docID) {\n  return findRecordKeyByValue(definitions, docID);\n}\n\nfunction findRecordKeyByValue(records, value) {\n  if (!value) {\n    return null;\n  }\n\n  const valueIndex = Object.values(records).indexOf(value);\n  return valueIndex === -1 ? null : Object.keys(records)[valueIndex];\n}","map":{"version":3,"sources":["/Users/apple/Documents/ownership/Datadidi/test/DataDiDi/packages/idx-common/lib/esm/utils/schema.js"],"names":["schemas","definitions","getDefaultCollections","DefaultCollectionKey","reduce","defaultCollections","defaultKey","Object","assign","getSchemaNameByDocID","docID","findRecordKeyByValue","getDefinitionNameByDocID","records","value","valueIndex","values","indexOf","keys"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,QAAqC,cAArC;AACA,OAAO,SAASC,qBAAT,CAA+BC,oBAAoB,GAAG,EAAtD,EAA0D;AAC7D,SAAOA,oBAAoB,CAACC,MAArB,CAA4B,CAACC,kBAAD,EAAqBC,UAArB,KAAqCC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,kBAAlB,CAAd,EAAqD;AAAE,KAACC,UAAD,GAAc;AAAhB,GAArD,CAAjE,EAA8I,EAA9I,CAAP;AACH;AACD,OAAO,SAASG,oBAAT,CAA8BC,KAA9B,EAAqC;AACxC,SAAOC,oBAAoB,CAACX,OAAD,EAAUU,KAAV,CAA3B;AACH;AACD,OAAO,SAASE,wBAAT,CAAkCF,KAAlC,EAAyC;AAC5C,SAAOC,oBAAoB,CAACV,WAAD,EAAcS,KAAd,CAA3B;AACH;;AACD,SAASC,oBAAT,CAA8BE,OAA9B,EAAuCC,KAAvC,EAA8C;AAC1C,MAAI,CAACA,KAAL,EAAY;AACR,WAAO,IAAP;AACH;;AACD,QAAMC,UAAU,GAAGR,MAAM,CAACS,MAAP,CAAcH,OAAd,EAAuBI,OAAvB,CAA+BH,KAA/B,CAAnB;AACA,SAAOC,UAAU,KAAK,CAAC,CAAhB,GAAoB,IAApB,GAA2BR,MAAM,CAACW,IAAP,CAAYL,OAAZ,EAAqBE,UAArB,CAAlC;AACH","sourcesContent":["import { schemas, definitions } from '../constants';\nexport function getDefaultCollections(DefaultCollectionKey = []) {\n    return DefaultCollectionKey.reduce((defaultCollections, defaultKey) => (Object.assign(Object.assign({}, defaultCollections), { [defaultKey]: [] })), {});\n}\nexport function getSchemaNameByDocID(docID) {\n    return findRecordKeyByValue(schemas, docID);\n}\nexport function getDefinitionNameByDocID(docID) {\n    return findRecordKeyByValue(definitions, docID);\n}\nfunction findRecordKeyByValue(records, value) {\n    if (!value) {\n        return null;\n    }\n    const valueIndex = Object.values(records).indexOf(value);\n    return valueIndex === -1 ? null : Object.keys(records)[valueIndex];\n}\n"]},"metadata":{},"sourceType":"module"}