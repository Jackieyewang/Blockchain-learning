{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst messages_1 = __importDefault(require(\"./messages\"));\n\nconst utils_1 = require(\"./utils\");\n/**\n * Sends site metadata over an RPC request.\n *\n * @param engine - The JSON RPC Engine to send metadata over.\n * @param log - The logging API to use.\n */\n\n\nasync function sendSiteMetadata(engine, log) {\n  try {\n    const domainMetadata = await getSiteMetadata(); // call engine.handle directly to avoid normal RPC request handling\n\n    engine.handle({\n      jsonrpc: '2.0',\n      id: 1,\n      method: 'metamask_sendDomainMetadata',\n      params: domainMetadata\n    }, utils_1.NOOP);\n  } catch (error) {\n    log.error({\n      message: messages_1.default.errors.sendSiteMetadata(),\n      originalError: error\n    });\n  }\n}\n\nexports.default = sendSiteMetadata;\n/**\n * Gets site metadata and returns it\n *\n */\n\nasync function getSiteMetadata() {\n  return {\n    name: getSiteName(window),\n    icon: await getSiteIcon(window)\n  };\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nfunction getSiteName(windowObject) {\n  const {\n    document\n  } = windowObject;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n}\n/**\n * Extracts an icon for the site from the DOM\n * @returns an icon URL\n */\n\n\nasync function getSiteIcon(windowObject) {\n  const {\n    document\n  } = windowObject;\n  const icons = document.querySelectorAll('head > link[rel~=\"icon\"]');\n\n  for (const icon of icons) {\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n  }\n\n  return null;\n}\n/**\n * Returns whether the given image URL exists\n * @param url - the url of the image\n * @returns Whether the image exists.\n */\n\n\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement('img');\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}","map":{"version":3,"sources":["../src/siteMetadata.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,MAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;;;;AAKG;;;AACY,eAAe,gBAAf,CACb,MADa,EAEb,GAFa,EAEG;AAEhB,MAAI;AACF,UAAM,cAAc,GAAG,MAAM,eAAe,EAA5C,CADE,CAEF;;AACA,IAAA,MAAM,CAAC,MAAP,CACE;AACE,MAAA,OAAO,EAAE,KADX;AAEE,MAAA,EAAE,EAAE,CAFN;AAGE,MAAA,MAAM,EAAE,6BAHV;AAIE,MAAA,MAAM,EAAE;AAJV,KADF,EAOE,OAAA,CAAA,IAPF;AASD,GAZD,CAYE,OAAO,KAAP,EAAc;AACd,IAAA,GAAG,CAAC,KAAJ,CAAU;AACR,MAAA,OAAO,EAAE,UAAA,CAAA,OAAA,CAAS,MAAT,CAAgB,gBAAhB,EADD;AAER,MAAA,aAAa,EAAE;AAFP,KAAV;AAID;AACF;;AAtBD,OAAA,CAAA,OAAA,GAAA,gBAAA;AAwBA;;;AAGG;;AACH,eAAe,eAAf,GAA8B;AAC5B,SAAO;AACL,IAAA,IAAI,EAAE,WAAW,CAAC,MAAD,CADZ;AAEL,IAAA,IAAI,EAAE,MAAM,WAAW,CAAC,MAAD;AAFlB,GAAP;AAID;AAED;;AAEG;;;AACH,SAAS,WAAT,CAAqB,YAArB,EAAgD;AAC9C,QAAM;AAAE,IAAA;AAAF,MAAe,YAArB;AAEA,QAAM,QAAQ,GAA2B,QAAQ,CAAC,aAAT,CACvC,sCADuC,CAAzC;;AAGA,MAAI,QAAJ,EAAc;AACZ,WAAO,QAAQ,CAAC,OAAhB;AACD;;AAED,QAAM,SAAS,GAA2B,QAAQ,CAAC,aAAT,CACxC,2BADwC,CAA1C;;AAGA,MAAI,SAAJ,EAAe;AACb,WAAO,SAAS,CAAC,OAAjB;AACD;;AAED,MAAI,QAAQ,CAAC,KAAT,IAAkB,QAAQ,CAAC,KAAT,CAAe,MAAf,GAAwB,CAA9C,EAAiD;AAC/C,WAAO,QAAQ,CAAC,KAAhB;AACD;;AAED,SAAO,MAAM,CAAC,QAAP,CAAgB,QAAvB;AACD;AAED;;;AAGG;;;AACH,eAAe,WAAf,CACE,YADF,EAC6B;AAE3B,QAAM;AAAE,IAAA;AAAF,MAAe,YAArB;AAEA,QAAM,KAAK,GAAgC,QAAQ,CAAC,gBAAT,CACzC,0BADyC,CAA3C;;AAGA,OAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACxB,QAAI,IAAI,KAAK,MAAM,SAAS,CAAC,IAAI,CAAC,IAAN,CAApB,CAAR,EAA0C;AACxC,aAAO,IAAI,CAAC,IAAZ;AACD;AACF;;AAED,SAAO,IAAP;AACD;AAED;;;;AAIG;;;AACH,SAAS,SAAT,CAAmB,GAAnB,EAA8B;AAC5B,SAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,QAAI;AACF,YAAM,GAAG,GAAG,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAZ;;AACA,MAAA,GAAG,CAAC,MAAJ,GAAa,MAAM,OAAO,CAAC,IAAD,CAA1B;;AACA,MAAA,GAAG,CAAC,OAAJ,GAAc,MAAM,OAAO,CAAC,KAAD,CAA3B;;AACA,MAAA,GAAG,CAAC,GAAJ,GAAU,GAAV;AACD,KALD,CAKE,OAAO,CAAP,EAAU;AACV,MAAA,MAAM,CAAC,CAAD,CAAN;AACD;AACF,GATM,CAAP;AAUD","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messages_1 = __importDefault(require(\"./messages\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Sends site metadata over an RPC request.\n *\n * @param engine - The JSON RPC Engine to send metadata over.\n * @param log - The logging API to use.\n */\nasync function sendSiteMetadata(engine, log) {\n    try {\n        const domainMetadata = await getSiteMetadata();\n        // call engine.handle directly to avoid normal RPC request handling\n        engine.handle({\n            jsonrpc: '2.0',\n            id: 1,\n            method: 'metamask_sendDomainMetadata',\n            params: domainMetadata,\n        }, utils_1.NOOP);\n    }\n    catch (error) {\n        log.error({\n            message: messages_1.default.errors.sendSiteMetadata(),\n            originalError: error,\n        });\n    }\n}\nexports.default = sendSiteMetadata;\n/**\n * Gets site metadata and returns it\n *\n */\nasync function getSiteMetadata() {\n    return {\n        name: getSiteName(window),\n        icon: await getSiteIcon(window),\n    };\n}\n/**\n * Extracts a name for the site from the DOM\n */\nfunction getSiteName(windowObject) {\n    const { document } = windowObject;\n    const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n    if (siteName) {\n        return siteName.content;\n    }\n    const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n    if (metaTitle) {\n        return metaTitle.content;\n    }\n    if (document.title && document.title.length > 0) {\n        return document.title;\n    }\n    return window.location.hostname;\n}\n/**\n * Extracts an icon for the site from the DOM\n * @returns an icon URL\n */\nasync function getSiteIcon(windowObject) {\n    const { document } = windowObject;\n    const icons = document.querySelectorAll('head > link[rel~=\"icon\"]');\n    for (const icon of icons) {\n        if (icon && (await imgExists(icon.href))) {\n            return icon.href;\n        }\n    }\n    return null;\n}\n/**\n * Returns whether the given image URL exists\n * @param url - the url of the image\n * @returns Whether the image exists.\n */\nfunction imgExists(url) {\n    return new Promise((resolve, reject) => {\n        try {\n            const img = document.createElement('img');\n            img.onload = () => resolve(true);\n            img.onerror = () => resolve(false);\n            img.src = url;\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n}\n//# sourceMappingURL=siteMetadata.js.map"]},"metadata":{},"sourceType":"script"}