{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setGlobalProvider = exports.initializeProvider = void 0;\n\nconst MetaMaskInpageProvider_1 = __importDefault(require(\"./MetaMaskInpageProvider\"));\n\nconst shimWeb3_1 = __importDefault(require(\"./shimWeb3\"));\n/**\n * Initializes a MetaMaskInpageProvider and (optionally) assigns it as window.ethereum.\n *\n * @param options - An options bag.\n * @param options.connectionStream - A Node.js stream.\n * @param options.jsonRpcStreamName - The name of the internal JSON-RPC stream.\n * @param options.maxEventListeners - The maximum number of event listeners.\n * @param options.shouldSendMetadata - Whether the provider should send page metadata.\n * @param options.shouldSetOnWindow - Whether the provider should be set as window.ethereum.\n * @param options.shouldShimWeb3 - Whether a window.web3 shim should be injected.\n * @returns The initialized provider (whether set or not).\n */\n\n\nfunction initializeProvider({\n  connectionStream,\n  jsonRpcStreamName,\n  logger = console,\n  maxEventListeners = 100,\n  shouldSendMetadata = true,\n  shouldSetOnWindow = true,\n  shouldShimWeb3 = false\n}) {\n  let provider = new MetaMaskInpageProvider_1.default(connectionStream, {\n    jsonRpcStreamName,\n    logger,\n    maxEventListeners,\n    shouldSendMetadata\n  });\n  provider = new Proxy(provider, {\n    // some common libraries, e.g. web3@1.x, mess with our API\n    deleteProperty: () => true\n  });\n\n  if (shouldSetOnWindow) {\n    setGlobalProvider(provider);\n  }\n\n  if (shouldShimWeb3) {\n    shimWeb3_1.default(provider, logger);\n  }\n\n  return provider;\n}\n\nexports.initializeProvider = initializeProvider;\n/**\n * Sets the given provider instance as window.ethereum and dispatches the\n * 'ethereum#initialized' event on window.\n *\n * @param providerInstance - The provider instance.\n */\n\nfunction setGlobalProvider(providerInstance) {\n  window.ethereum = providerInstance;\n  window.dispatchEvent(new Event('ethereum#initialized'));\n}\n\nexports.setGlobalProvider = setGlobalProvider;","map":{"version":3,"sources":["../src/initializeInpageProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;AACA,MAAA,wBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AAGA,MAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;AAmBA;;;;;;;;;;;AAWG;;;AACH,SAAgB,kBAAhB,CAAmC;AACjC,EAAA,gBADiC;AAEjC,EAAA,iBAFiC;AAGjC,EAAA,MAAM,GAAG,OAHwB;AAIjC,EAAA,iBAAiB,GAAG,GAJa;AAKjC,EAAA,kBAAkB,GAAG,IALY;AAMjC,EAAA,iBAAiB,GAAG,IANa;AAOjC,EAAA,cAAc,GAAG;AAPgB,CAAnC,EAQ4B;AAC1B,MAAI,QAAQ,GAAG,IAAI,wBAAA,CAAA,OAAJ,CAA2B,gBAA3B,EAA6C;AAC1D,IAAA,iBAD0D;AAE1D,IAAA,MAF0D;AAG1D,IAAA,iBAH0D;AAI1D,IAAA;AAJ0D,GAA7C,CAAf;AAOA,EAAA,QAAQ,GAAG,IAAI,KAAJ,CAAU,QAAV,EAAoB;AAC7B;AACA,IAAA,cAAc,EAAE,MAAM;AAFO,GAApB,CAAX;;AAKA,MAAI,iBAAJ,EAAuB;AACrB,IAAA,iBAAiB,CAAC,QAAD,CAAjB;AACD;;AAED,MAAI,cAAJ,EAAoB;AAClB,IAAA,UAAA,CAAA,OAAA,CAAS,QAAT,EAAmB,MAAnB;AACD;;AAED,SAAO,QAAP;AACD;;AA9BD,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAgCA;;;;;AAKG;;AACH,SAAgB,iBAAhB,CACE,gBADF,EAC0C;AAEvC,EAAA,MAA8B,CAAC,QAA/B,GAA0C,gBAA1C;AACD,EAAA,MAAM,CAAC,aAAP,CAAqB,IAAI,KAAJ,CAAU,sBAAV,CAArB;AACD;;AALD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setGlobalProvider = exports.initializeProvider = void 0;\nconst MetaMaskInpageProvider_1 = __importDefault(require(\"./MetaMaskInpageProvider\"));\nconst shimWeb3_1 = __importDefault(require(\"./shimWeb3\"));\n/**\n * Initializes a MetaMaskInpageProvider and (optionally) assigns it as window.ethereum.\n *\n * @param options - An options bag.\n * @param options.connectionStream - A Node.js stream.\n * @param options.jsonRpcStreamName - The name of the internal JSON-RPC stream.\n * @param options.maxEventListeners - The maximum number of event listeners.\n * @param options.shouldSendMetadata - Whether the provider should send page metadata.\n * @param options.shouldSetOnWindow - Whether the provider should be set as window.ethereum.\n * @param options.shouldShimWeb3 - Whether a window.web3 shim should be injected.\n * @returns The initialized provider (whether set or not).\n */\nfunction initializeProvider({ connectionStream, jsonRpcStreamName, logger = console, maxEventListeners = 100, shouldSendMetadata = true, shouldSetOnWindow = true, shouldShimWeb3 = false, }) {\n    let provider = new MetaMaskInpageProvider_1.default(connectionStream, {\n        jsonRpcStreamName,\n        logger,\n        maxEventListeners,\n        shouldSendMetadata,\n    });\n    provider = new Proxy(provider, {\n        // some common libraries, e.g. web3@1.x, mess with our API\n        deleteProperty: () => true,\n    });\n    if (shouldSetOnWindow) {\n        setGlobalProvider(provider);\n    }\n    if (shouldShimWeb3) {\n        shimWeb3_1.default(provider, logger);\n    }\n    return provider;\n}\nexports.initializeProvider = initializeProvider;\n/**\n * Sets the given provider instance as window.ethereum and dispatches the\n * 'ethereum#initialized' event on window.\n *\n * @param providerInstance - The provider instance.\n */\nfunction setGlobalProvider(providerInstance) {\n    window.ethereum = providerInstance;\n    window.dispatchEvent(new Event('ethereum#initialized'));\n}\nexports.setGlobalProvider = setGlobalProvider;\n//# sourceMappingURL=initializeInpageProvider.js.map"]},"metadata":{},"sourceType":"script"}