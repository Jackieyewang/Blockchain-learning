{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Caip10Link_1;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Caip10Link = void 0;\n\nconst common_1 = require(\"@ceramicnetwork/common\");\n\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\n\nconst caip_1 = require(\"caip\");\n\nconst throwReadOnlyError = () => {\n  throw new Error('Historical stream commits cannot be modified. Load the stream without specifying a commit to make updates.');\n};\n\nconst DEFAULT_CREATE_OPTS = {\n  anchor: false,\n  publish: true,\n  sync: common_1.SyncOptions.PREFER_CACHE\n};\nconst DEFAULT_UPDATE_OPTS = {\n  anchor: true,\n  publish: true\n};\nconst DEFAULT_LOAD_OPTS = {\n  sync: common_1.SyncOptions.PREFER_CACHE\n};\nlet Caip10Link = Caip10Link_1 = class Caip10Link extends common_1.Stream {\n  get did() {\n    return this._getContent();\n  }\n\n  static async fromAccount(ceramic, accountId, opts = {}) {\n    opts = { ...DEFAULT_CREATE_OPTS,\n      ...opts\n    };\n    const normalizedAccountId = new caip_1.AccountID(accountId);\n    const genesisCommit = Caip10Link_1.makeGenesis(normalizedAccountId);\n    return Caip10Link_1.fromGenesis(ceramic, genesisCommit, opts);\n  }\n\n  static async fromGenesis(ceramic, genesisCommit, opts = {}) {\n    opts = { ...DEFAULT_CREATE_OPTS,\n      ...opts\n    };\n    return ceramic.createStreamFromGenesis(Caip10Link_1.STREAM_TYPE_ID, genesisCommit, opts);\n  }\n\n  async setDid(did, authProvider, opts = {}) {\n    opts = { ...DEFAULT_UPDATE_OPTS,\n      ...opts\n    };\n    const didStr = typeof did == \"string\" ? did : did.id;\n    const linkProof = await authProvider.createLink(didStr);\n    return this.setDidProof(linkProof, opts);\n  }\n\n  async setDidProof(proof, opts = {}) {\n    opts = { ...DEFAULT_UPDATE_OPTS,\n      ...opts\n    };\n    const commit = this.makeCommit(proof);\n    const updated = await this.api.applyCommit(this.id, commit, opts);\n    this.state$.next(updated.state);\n  }\n\n  static async load(ceramic, streamId, opts = {}) {\n    opts = { ...DEFAULT_LOAD_OPTS,\n      ...opts\n    };\n    const streamRef = streamid_1.StreamRef.from(streamId);\n\n    if (streamRef.type != Caip10Link_1.STREAM_TYPE_ID) {\n      throw new Error(`StreamID ${streamRef.toString()} does not refer to a '${Caip10Link_1.STREAM_TYPE_NAME}' stream, but to a ${streamRef.typeName}`);\n    }\n\n    return ceramic.loadStream(streamRef, opts);\n  }\n\n  static makeGenesis(accountId) {\n    return {\n      header: {\n        controllers: [accountId.toString()],\n        family: `caip10-${accountId.chainId.toString()}`\n      }\n    };\n  }\n\n  makeCommit(proof) {\n    return {\n      data: proof,\n      prev: this.tip,\n      id: this.state$.id.cid\n    };\n  }\n\n  makeReadOnly() {\n    this.setDidProof = throwReadOnlyError;\n    this.setDid = throwReadOnlyError;\n  }\n\n};\nCaip10Link.STREAM_TYPE_NAME = 'caip10-link';\nCaip10Link.STREAM_TYPE_ID = 1;\nCaip10Link = Caip10Link_1 = __decorate([common_1.StreamStatic()], Caip10Link);\nexports.Caip10Link = Caip10Link;","map":{"version":3,"sources":["../src/caip10-link.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Caip10Link_1;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Caip10Link = void 0;\nconst common_1 = require(\"@ceramicnetwork/common\");\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\nconst caip_1 = require(\"caip\");\nconst throwReadOnlyError = () => {\n    throw new Error('Historical stream commits cannot be modified. Load the stream without specifying a commit to make updates.');\n};\nconst DEFAULT_CREATE_OPTS = { anchor: false, publish: true, sync: common_1.SyncOptions.PREFER_CACHE };\nconst DEFAULT_UPDATE_OPTS = { anchor: true, publish: true };\nconst DEFAULT_LOAD_OPTS = { sync: common_1.SyncOptions.PREFER_CACHE };\nlet Caip10Link = Caip10Link_1 = class Caip10Link extends common_1.Stream {\n    get did() {\n        return this._getContent();\n    }\n    static async fromAccount(ceramic, accountId, opts = {}) {\n        opts = { ...DEFAULT_CREATE_OPTS, ...opts };\n        const normalizedAccountId = new caip_1.AccountID(accountId);\n        const genesisCommit = Caip10Link_1.makeGenesis(normalizedAccountId);\n        return Caip10Link_1.fromGenesis(ceramic, genesisCommit, opts);\n    }\n    static async fromGenesis(ceramic, genesisCommit, opts = {}) {\n        opts = { ...DEFAULT_CREATE_OPTS, ...opts };\n        return ceramic.createStreamFromGenesis(Caip10Link_1.STREAM_TYPE_ID, genesisCommit, opts);\n    }\n    async setDid(did, authProvider, opts = {}) {\n        opts = { ...DEFAULT_UPDATE_OPTS, ...opts };\n        const didStr = typeof did == \"string\" ? did : did.id;\n        const linkProof = await authProvider.createLink(didStr);\n        return this.setDidProof(linkProof, opts);\n    }\n    async setDidProof(proof, opts = {}) {\n        opts = { ...DEFAULT_UPDATE_OPTS, ...opts };\n        const commit = this.makeCommit(proof);\n        const updated = await this.api.applyCommit(this.id, commit, opts);\n        this.state$.next(updated.state);\n    }\n    static async load(ceramic, streamId, opts = {}) {\n        opts = { ...DEFAULT_LOAD_OPTS, ...opts };\n        const streamRef = streamid_1.StreamRef.from(streamId);\n        if (streamRef.type != Caip10Link_1.STREAM_TYPE_ID) {\n            throw new Error(`StreamID ${streamRef.toString()} does not refer to a '${Caip10Link_1.STREAM_TYPE_NAME}' stream, but to a ${streamRef.typeName}`);\n        }\n        return ceramic.loadStream(streamRef, opts);\n    }\n    static makeGenesis(accountId) {\n        return { header: { controllers: [accountId.toString()],\n                family: `caip10-${accountId.chainId.toString()}` } };\n    }\n    makeCommit(proof) {\n        return { data: proof, prev: this.tip, id: this.state$.id.cid };\n    }\n    makeReadOnly() {\n        this.setDidProof = throwReadOnlyError;\n        this.setDid = throwReadOnlyError;\n    }\n};\nCaip10Link.STREAM_TYPE_NAME = 'caip10-link';\nCaip10Link.STREAM_TYPE_ID = 1;\nCaip10Link = Caip10Link_1 = __decorate([\n    common_1.StreamStatic()\n], Caip10Link);\nexports.Caip10Link = Caip10Link;\n//# sourceMappingURL=caip10-link.js.map"]},"metadata":{},"sourceType":"script"}