{"ast":null,"code":"import { createNamespaceClient, createNamespaceServer } from '@ceramicnetwork/rpc-postmessage';\nimport { createPostMessageTransport } from '@ceramicnetwork/transport-postmessage';\nvar DEFAULT_OPTIONS = {\n  onInvalidInput: function onInvalidInput(_input, _error) {// Silence warnings of invalid messages, such as message events sent by third-parties\n  },\n  // Client requests will be sent without origin restriction\n  postMessageArguments: ['*']\n};\n\nfunction createClient(namespace, target, options) {\n  if (target === void 0) {\n    target = window;\n  }\n\n  if (options === void 0) {\n    options = DEFAULT_OPTIONS;\n  }\n\n  var transport = createPostMessageTransport(window, target, options);\n  return createNamespaceClient(transport, namespace, options);\n}\n\nfunction createServer(namespace, methods, target) {\n  if (target === void 0) {\n    target = window;\n  }\n\n  return createNamespaceServer({\n    methods: methods,\n    namespace: namespace,\n    target: target\n  });\n}\n\nexport { createClient, createServer };","map":{"version":3,"sources":["../src/index.ts"],"names":["DEFAULT_OPTIONS","onInvalidInput","postMessageArguments","createClient","namespace","target","window","options","transport","createPostMessageTransport","createNamespaceClient","createServer","methods","createNamespaceServer"],"mappings":";;AAyBA,IAAMA,eAAe,GAAkB;AACrCC,EAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,MAAA,EAAA,MAAA,EAAA,CAAA;AADqB,GAAA;AAIrC;AACAC,EAAAA,oBAAoB,EAAE,CAAA,GAAA;AALe,CAAvC;;SAQgBC,Y,CACdC,S,EACAC,M,EACAE,O,EAAAA;MADAF,MAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,MAAAA,GAAiBC,MAAjBD;;;MACAE,OAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,OAAAA,GAAyBP,eAAzBO;;;AAEA,MAAMC,SAAS,GAAGC,0BAA0B,CAAA,MAAA,EAAA,MAAA,EAA5C,OAA4C,CAA5C;AAIA,SAAOC,qBAAqB,CAAA,SAAA,EAAA,SAAA,EAA5B,OAA4B,CAA5B;AACD;;SAEeC,Y,CACdP,S,EACAQ,O,EACAP,M,EAAAA;MAAAA,MAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,MAAAA,GAAiBC,MAAjBD;;;AAEA,SAAOQ,qBAAqB,CAAqB;AAAED,IAAAA,OAAO,EAAT,OAAA;AAAWR,IAAAA,SAAS,EAApB,SAAA;AAAsBC,IAAAA,MAAM,EAANA;AAAtB,GAArB,CAA5B;AACD","sourcesContent":["import { createNamespaceClient, createNamespaceServer } from '@ceramicnetwork/rpc-postmessage'\nimport type { HandledPayload } from '@ceramicnetwork/rpc-postmessage'\nimport type { UnwrapObservableOptions, Wrapped } from '@ceramicnetwork/transport-subject'\nimport { createPostMessageTransport } from '@ceramicnetwork/transport-postmessage'\nimport type {\n  IncomingMessage,\n  PostMessageTransportOptions,\n} from '@ceramicnetwork/transport-postmessage'\nimport { RPCClient } from 'rpc-utils'\nimport type { HandlerMethods, RPCMethods, RPCRequest, RPCResponse } from 'rpc-utils'\nimport type { Observable } from 'rxjs'\n\nexport type ClientOptions = UnwrapObservableOptions & PostMessageTransportOptions\n\nexport type IncomingRequest<\n  Methods extends RPCMethods,\n  Namespace extends string = string\n> = IncomingMessage<Wrapped<RPCRequest<Methods, keyof Methods>, Namespace>>\n\nexport type ServerPayload<Methods extends RPCMethods, Namespace extends string> = HandledPayload<\n  IncomingRequest<Methods, Namespace>,\n  Methods,\n  keyof Methods\n>\n\nconst DEFAULT_OPTIONS: ClientOptions = {\n  onInvalidInput: (_input: unknown, _error: Error) => {\n    // Silence warnings of invalid messages, such as message events sent by third-parties\n  },\n  // Client requests will be sent without origin restriction\n  postMessageArguments: ['*'],\n}\n\nexport function createClient<Methods extends RPCMethods, Namespace extends string = string>(\n  namespace: Namespace,\n  target: Window = window,\n  options: ClientOptions = DEFAULT_OPTIONS\n): RPCClient<Methods> {\n  const transport = createPostMessageTransport<\n    Wrapped<RPCResponse<Methods, keyof Methods>, Namespace>,\n    Wrapped<RPCRequest<Methods, keyof Methods>, Namespace>\n  >(window, target, options)\n  return createNamespaceClient<Methods, Namespace>(transport, namespace, options)\n}\n\nexport function createServer<Methods extends RPCMethods, Namespace extends string = string>(\n  namespace: Namespace,\n  methods: HandlerMethods<IncomingRequest<Methods, Namespace>, Methods>,\n  target: Window = window\n): Observable<ServerPayload<Methods, Namespace>> {\n  return createNamespaceServer<Methods, Namespace>({ methods, namespace, target })\n}\n"]},"metadata":{},"sourceType":"module"}