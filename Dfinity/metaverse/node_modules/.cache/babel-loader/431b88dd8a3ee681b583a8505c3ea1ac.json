{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readCid = exports.readVarint = void 0;\n\nconst cids_1 = __importDefault(require(\"cids\"));\n\nconst varint_1 = __importDefault(require(\"varint\"));\n\nfunction readVarint(bytes) {\n  const value = varint_1.default.decode(bytes);\n  const readLength = varint_1.default.decode.bytes;\n  const remainder = bytes.slice(readLength);\n  return [value, remainder, readLength];\n}\n\nexports.readVarint = readVarint;\n\nfunction isCidVersion(input) {\n  return input === 0 || input === 1;\n}\n\nfunction readCid(bytes) {\n  const [cidVersion, cidVersionRemainder] = readVarint(bytes);\n\n  if (!isCidVersion(cidVersion)) {\n    throw new Error(`Unknown CID version ${cidVersion}`);\n  }\n\n  const [codec, codecRemainder] = readVarint(cidVersionRemainder);\n  const [, mhCodecRemainder, mhCodecLength] = readVarint(codecRemainder);\n  const [mhLength,, mhLengthLength] = readVarint(mhCodecRemainder);\n  const multihashBytes = codecRemainder.slice(0, mhCodecLength + mhLengthLength + mhLength);\n  const multihashBytesRemainder = codecRemainder.slice(mhCodecLength + mhLengthLength + mhLength);\n  return [new cids_1.default(cidVersion, codec, multihashBytes), multihashBytesRemainder];\n}\n\nexports.readCid = readCid;","map":{"version":3,"sources":["../src/reading-bytes.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,MAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAEA,SAAgB,UAAhB,CAA2B,KAA3B,EAA4C;AAC1C,QAAM,KAAK,GAAG,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,KAAd,CAAd;AACA,QAAM,UAAU,GAAG,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,KAAjC;AACA,QAAM,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,UAAZ,CAAlB;AACA,SAAO,CAAC,KAAD,EAAQ,SAAR,EAAmB,UAAnB,CAAP;AACD;;AALD,OAAA,CAAA,UAAA,GAAA,UAAA;;AAOA,SAAS,YAAT,CAAsB,KAAtB,EAAmC;AACjC,SAAO,KAAK,KAAK,CAAV,IAAe,KAAK,KAAK,CAAhC;AACD;;AAED,SAAgB,OAAhB,CAAwB,KAAxB,EAAyC;AACvC,QAAM,CAAC,UAAD,EAAa,mBAAb,IAAoC,UAAU,CAAC,KAAD,CAApD;;AACA,MAAI,CAAC,YAAY,CAAC,UAAD,CAAjB,EAA+B;AAC7B,UAAM,IAAI,KAAJ,CAAU,uBAAuB,UAAU,EAA3C,CAAN;AACD;;AACD,QAAM,CAAC,KAAD,EAAQ,cAAR,IAA0B,UAAU,CAAC,mBAAD,CAA1C;AACA,QAAM,GAAG,gBAAH,EAAqB,aAArB,IAAsC,UAAU,CAAC,cAAD,CAAtD;AACA,QAAM,CAAC,QAAD,GAAa,cAAb,IAA+B,UAAU,CAAC,gBAAD,CAA/C;AACA,QAAM,cAAc,GAAG,cAAc,CAAC,KAAf,CAAqB,CAArB,EAAwB,aAAa,GAAG,cAAhB,GAAiC,QAAzD,CAAvB;AACA,QAAM,uBAAuB,GAAG,cAAc,CAAC,KAAf,CAAqB,aAAa,GAAG,cAAhB,GAAiC,QAAtD,CAAhC;AACA,SAAO,CAAC,IAAI,MAAA,CAAA,OAAJ,CAAQ,UAAR,EAAoB,KAApB,EAA2B,cAA3B,CAAD,EAA6C,uBAA7C,CAAP;AACD;;AAXD,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readCid = exports.readVarint = void 0;\nconst cids_1 = __importDefault(require(\"cids\"));\nconst varint_1 = __importDefault(require(\"varint\"));\nfunction readVarint(bytes) {\n    const value = varint_1.default.decode(bytes);\n    const readLength = varint_1.default.decode.bytes;\n    const remainder = bytes.slice(readLength);\n    return [value, remainder, readLength];\n}\nexports.readVarint = readVarint;\nfunction isCidVersion(input) {\n    return input === 0 || input === 1;\n}\nfunction readCid(bytes) {\n    const [cidVersion, cidVersionRemainder] = readVarint(bytes);\n    if (!isCidVersion(cidVersion)) {\n        throw new Error(`Unknown CID version ${cidVersion}`);\n    }\n    const [codec, codecRemainder] = readVarint(cidVersionRemainder);\n    const [, mhCodecRemainder, mhCodecLength] = readVarint(codecRemainder);\n    const [mhLength, , mhLengthLength] = readVarint(mhCodecRemainder);\n    const multihashBytes = codecRemainder.slice(0, mhCodecLength + mhLengthLength + mhLength);\n    const multihashBytesRemainder = codecRemainder.slice(mhCodecLength + mhLengthLength + mhLength);\n    return [new cids_1.default(cidVersion, codec, multihashBytes), multihashBytesRemainder];\n}\nexports.readCid = readCid;\n//# sourceMappingURL=reading-bytes.js.map"]},"metadata":{},"sourceType":"script"}