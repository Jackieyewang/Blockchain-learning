{"ast":null,"code":"import { apis } from 'idx-common';\nimport storage from '../utils/storage';\nimport { STORAGE_TYPE } from '../utils/constants';\nlet idx;\nexport async function authenticateWithEthereum(ethereumProvider, address) {\n  const ceramic = apis.ceramic.createCeramic(process.env.CERAMIC_API_HOST);\n  const didProvider = await apis.threeId.createThreeIdFromEthereumProvider({\n    threeIdConnectHost: process.env.THREE_ID_CONNECT_HOST,\n    ethereumProvider,\n    address\n  });\n  idx = apis.idx.createIDX(ceramic);\n  await apis.threeId.authenticate({\n    ceramic,\n    didProvider\n  });\n}\nexport function isIDXAuthenticated() {\n  var _idx;\n\n  return (_idx = idx) === null || _idx === void 0 ? void 0 : _idx.authenticated;\n}\nexport function getDID() {\n  var _idx2;\n\n  return (_idx2 = idx) === null || _idx2 === void 0 ? void 0 : _idx2.id;\n}\nexport async function setProfile(profile) {\n  return apis.profile.setBasicProfileDocContent(idx, profile);\n}\nexport async function getProfile(did) {\n  return apis.profile.getBasicProfileDocContent(idx, did);\n}\nexport async function initCollections(did) {\n  if (!(await apis.collection.hasCollections(idx, did))) {\n    return apis.collection.initCollections(idx);\n  }\n\n  return true;\n}\nexport async function addBookmark(bookmark, key) {\n  return apis.bookmark.addBookmarkToCollection(idx, {\n    bookmarkToAdd: bookmark,\n    collectionKey: key\n  });\n}\nexport async function getBookmarks(key) {\n  return apis.bookmark.getBookmarksFromCollection(idx, key);\n}\nexport async function getAllBookmarks() {\n  return apis.bookmark.getAllBookmarks(idx);\n}\nexport function isLogin() {\n  return Boolean(storage.getItem(STORAGE_TYPE.STORED_DID));\n}","map":{"version":3,"sources":["/Users/apple/Documents/ownership/Datadidi/test/DataDiDi/packages/metaverse/src/apis/ceramic.ts"],"names":["apis","storage","STORAGE_TYPE","idx","authenticateWithEthereum","ethereumProvider","address","ceramic","createCeramic","process","env","CERAMIC_API_HOST","didProvider","threeId","createThreeIdFromEthereumProvider","threeIdConnectHost","THREE_ID_CONNECT_HOST","createIDX","authenticate","isIDXAuthenticated","authenticated","getDID","id","setProfile","profile","setBasicProfileDocContent","getProfile","did","getBasicProfileDocContent","initCollections","collection","hasCollections","addBookmark","bookmark","key","addBookmarkToCollection","bookmarkToAdd","collectionKey","getBookmarks","getBookmarksFromCollection","getAllBookmarks","isLogin","Boolean","getItem","STORED_DID"],"mappings":"AAAA,SAASA,IAAT,QAA6C,YAA7C;AAEA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA,IAAIC,GAAJ;AAEA,OAAO,eAAeC,wBAAf,CACLC,gBADK,EAELC,OAFK,EAGU;AACf,QAAMC,OAAO,GAAGP,IAAI,CAACO,OAAL,CAAaC,aAAb,CAA2BC,OAAO,CAACC,GAAR,CAAYC,gBAAvC,CAAhB;AAEA,QAAMC,WAAW,GAAG,MAAMZ,IAAI,CAACa,OAAL,CAAaC,iCAAb,CAA+C;AACvEC,IAAAA,kBAAkB,EAAEN,OAAO,CAACC,GAAR,CAAYM,qBADuC;AAEvEX,IAAAA,gBAFuE;AAGvEC,IAAAA;AAHuE,GAA/C,CAA1B;AAMAH,EAAAA,GAAG,GAAGH,IAAI,CAACG,GAAL,CAASc,SAAT,CAAmBV,OAAnB,CAAN;AAEA,QAAMP,IAAI,CAACa,OAAL,CAAaK,YAAb,CAA0B;AAAEX,IAAAA,OAAF;AAAWK,IAAAA;AAAX,GAA1B,CAAN;AACD;AAED,OAAO,SAASO,kBAAT,GAAwC;AAAA;;AAC7C,iBAAOhB,GAAP,yCAAO,KAAKiB,aAAZ;AACD;AAED,OAAO,SAASC,MAAT,GAA2B;AAAA;;AAChC,kBAAOlB,GAAP,0CAAO,MAAKmB,EAAZ;AACD;AAED,OAAO,eAAeC,UAAf,CAA2BC,OAA3B,EAAkD;AACvD,SAAOxB,IAAI,CAACwB,OAAL,CAAaC,yBAAb,CAAuCtB,GAAvC,EAA4CqB,OAA5C,CAAP;AACD;AAED,OAAO,eAAeE,UAAf,CAA2BC,GAA3B,EAAyC;AAC9C,SAAO3B,IAAI,CAACwB,OAAL,CAAaI,yBAAb,CAAuCzB,GAAvC,EAA4CwB,GAA5C,CAAP;AACD;AAED,OAAO,eAAeE,eAAf,CAAgCF,GAAhC,EAA8C;AACnD,MAAI,EAAE,MAAM3B,IAAI,CAAC8B,UAAL,CAAgBC,cAAhB,CAA+B5B,GAA/B,EAAoCwB,GAApC,CAAR,CAAJ,EAAuD;AACrD,WAAO3B,IAAI,CAAC8B,UAAL,CAAgBD,eAAhB,CAAgC1B,GAAhC,CAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED,OAAO,eAAe6B,WAAf,CAA4BC,QAA5B,EAAgDC,GAAhD,EAA+E;AACpF,SAAOlC,IAAI,CAACiC,QAAL,CAAcE,uBAAd,CAAsChC,GAAtC,EAA2C;AAChDiC,IAAAA,aAAa,EAAEH,QADiC;AAEhDI,IAAAA,aAAa,EAAEH;AAFiC,GAA3C,CAAP;AAID;AAED,OAAO,eAAeI,YAAf,CAA6BJ,GAA7B,EAA+D;AACpE,SAAOlC,IAAI,CAACiC,QAAL,CAAcM,0BAAd,CAAyCpC,GAAzC,EAA8C+B,GAA9C,CAAP;AACD;AAED,OAAO,eAAeM,eAAf,GAA0E;AAC/E,SAAOxC,IAAI,CAACiC,QAAL,CAAcO,eAAd,CAA8BrC,GAA9B,CAAP;AACD;AAED,OAAO,SAASsC,OAAT,GAAmB;AACxB,SAAOC,OAAO,CAACzC,OAAO,CAAC0C,OAAR,CAAgBzC,YAAY,CAAC0C,UAA7B,CAAD,CAAd;AACD","sourcesContent":["import { apis, Bookmark, BasicProfile } from 'idx-common';\nimport { IDX } from '@ceramicstudio/idx';\nimport storage from '../utils/storage';\nimport { STORAGE_TYPE } from '../utils/constants';\n\nlet idx: IDX;\n\nexport async function authenticateWithEthereum (\n  ethereumProvider: any,\n  address: string\n): Promise<void> {\n  const ceramic = apis.ceramic.createCeramic(process.env.CERAMIC_API_HOST);\n\n  const didProvider = await apis.threeId.createThreeIdFromEthereumProvider({\n    threeIdConnectHost: process.env.THREE_ID_CONNECT_HOST,\n    ethereumProvider,\n    address\n  });\n\n  idx = apis.idx.createIDX(ceramic);\n\n  await apis.threeId.authenticate({ ceramic, didProvider });\n}\n\nexport function isIDXAuthenticated (): boolean {\n  return idx?.authenticated;\n}\n\nexport function getDID (): string {\n  return idx?.id;\n}\n\nexport async function setProfile (profile: BasicProfile) {\n  return apis.profile.setBasicProfileDocContent(idx, profile);\n}\n\nexport async function getProfile (did?: string) {\n  return apis.profile.getBasicProfileDocContent(idx, did);\n}\n\nexport async function initCollections (did?: string) {\n  if (!(await apis.collection.hasCollections(idx, did))) {\n    return apis.collection.initCollections(idx);\n  }\n  return true;\n}\n\nexport async function addBookmark (bookmark: Bookmark, key?: string): Promise<string> {\n  return apis.bookmark.addBookmarkToCollection(idx, {\n    bookmarkToAdd: bookmark,\n    collectionKey: key\n  });\n}\n\nexport async function getBookmarks (key: string): Promise<Bookmark[]> {\n  return apis.bookmark.getBookmarksFromCollection(idx, key);\n}\n\nexport async function getAllBookmarks (): Promise<{ [key: string]: Bookmark[] }> {\n  return apis.bookmark.getAllBookmarks(idx);\n}\n\nexport function isLogin() {\n  return Boolean(storage.getItem(STORAGE_TYPE.STORED_DID));\n}"]},"metadata":{},"sourceType":"module"}