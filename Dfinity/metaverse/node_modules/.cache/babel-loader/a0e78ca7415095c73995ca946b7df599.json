{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DefaultCollectionKeys, IDXAliases } from '../constants/enums';\nimport { getDefaultCollections } from '../utils/schema'; // import { deleteBookmark } from './bookmark';\n\nexport function initCollections(idx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield idx.remove(IDXAliases.COLLECTIONS);\n    const collectionsID = yield idx.set(IDXAliases.COLLECTIONS, getDefaultCollections(Object.values(DefaultCollectionKeys)));\n    return collectionsID.toUrl();\n  });\n}\nexport function hasCollections(idx, did) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return idx.has(IDXAliases.COLLECTIONS, did);\n  });\n}\nexport function getCollections(idx, did) {\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      const collections = idx.get(IDXAliases.COLLECTIONS, did);\n\n      if (!collections) {\n        throw new Error(`Collections are not initialized in your metaverse`);\n      }\n\n      return collections;\n    } catch (_a) {\n      yield initCollections(idx);\n      const defaultCollections = {\n        'private': [],\n        'public': [],\n        'unsorted': [],\n        'trash': []\n      };\n      return defaultCollections;\n    }\n  });\n}\nexport function getCollectionNames(idx, did) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const collections = yield getCollections(idx, did);\n\n    if (!collections) {\n      throw new Error(`Collections are not initialized in your metaverse`);\n    }\n\n    const names = [];\n\n    for (let key in collections) {\n      names.push(key);\n    }\n\n    return names;\n  });\n}\nexport function getCollectionByKey(idx, params) {\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      const collections = yield getCollections(idx, params.did);\n\n      if (!collections) {\n        throw new Error(`Collections are not initialized in your metaverse`);\n      }\n\n      const collectionForKey = collections[params.key];\n\n      if (!Array.isArray(collectionForKey)) {\n        throw new Error(`Collection key ${params.key} is not created in your metaverse`);\n      }\n\n      return collectionForKey;\n    } catch (error) {\n      return null;\n    }\n  });\n}\nexport function newCollection(idx, params) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const collections = yield getCollections(idx, params.did);\n\n    if (!collections) {\n      throw new Error(`Collections are not initialized in your metaverse`);\n    }\n\n    const collectionForKey = collections[params.key];\n\n    if (Array.isArray(collectionForKey)) {\n      return 'Already exists';\n    }\n\n    const collectionsID = yield idx.set(IDXAliases.COLLECTIONS, Object.assign(Object.assign({}, collections), {\n      [params.key]: []\n    }));\n    return collectionsID.toUrl();\n  });\n} // export async function removeCollection(\n//     idx: IDX,\n//     params: {\n//         key: string;\n//         did?: string;\n//     }\n// ): Promise<boolean> {\n// }\n// export async function updateCollectionName(\n//     idx: IDX,\n//     params: {\n//         key: string;\n//         did?: string;\n//     }\n// ): Promise<boolean> {\n// }","map":{"version":3,"sources":["/Users/apple/Documents/ownership/Datadidi/test/DataDiDi/packages/idx-common/lib/esm/apis/collection.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","DefaultCollectionKeys","IDXAliases","getDefaultCollections","initCollections","idx","remove","COLLECTIONS","collectionsID","set","Object","values","toUrl","hasCollections","did","has","getCollections","collections","get","Error","_a","defaultCollections","getCollectionNames","names","key","push","getCollectionByKey","params","collectionForKey","Array","isArray","error","newCollection","assign"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DefaultCollectionKeys, IDXAliases } from '../constants/enums';\nimport { getDefaultCollections } from '../utils/schema';\n// import { deleteBookmark } from './bookmark';\nexport function initCollections(idx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        yield idx.remove(IDXAliases.COLLECTIONS);\n        const collectionsID = yield idx.set(IDXAliases.COLLECTIONS, getDefaultCollections(Object.values(DefaultCollectionKeys)));\n        return collectionsID.toUrl();\n    });\n}\nexport function hasCollections(idx, did) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return idx.has(IDXAliases.COLLECTIONS, did);\n    });\n}\nexport function getCollections(idx, did) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const collections = idx.get(IDXAliases.COLLECTIONS, did);\n            if (!collections) {\n                throw new Error(`Collections are not initialized in your metaverse`);\n            }\n            return collections;\n        }\n        catch (_a) {\n            yield initCollections(idx);\n            const defaultCollections = {\n                'private': [], 'public': [],\n                'unsorted': [], 'trash': []\n            };\n            return defaultCollections;\n        }\n    });\n}\nexport function getCollectionNames(idx, did) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const collections = yield getCollections(idx, did);\n        if (!collections) {\n            throw new Error(`Collections are not initialized in your metaverse`);\n        }\n        const names = [];\n        for (let key in collections) {\n            names.push(key);\n        }\n        return names;\n    });\n}\nexport function getCollectionByKey(idx, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const collections = yield getCollections(idx, params.did);\n            if (!collections) {\n                throw new Error(`Collections are not initialized in your metaverse`);\n            }\n            const collectionForKey = collections[params.key];\n            if (!Array.isArray(collectionForKey)) {\n                throw new Error(`Collection key ${params.key} is not created in your metaverse`);\n            }\n            return collectionForKey;\n        }\n        catch (error) {\n            return null;\n        }\n    });\n}\nexport function newCollection(idx, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const collections = yield getCollections(idx, params.did);\n        if (!collections) {\n            throw new Error(`Collections are not initialized in your metaverse`);\n        }\n        const collectionForKey = collections[params.key];\n        if (Array.isArray(collectionForKey)) {\n            return 'Already exists';\n        }\n        const collectionsID = yield idx.set(IDXAliases.COLLECTIONS, Object.assign(Object.assign({}, collections), { [params.key]: [] }));\n        return collectionsID.toUrl();\n    });\n}\n// export async function removeCollection(\n//     idx: IDX,\n//     params: {\n//         key: string;\n//         did?: string;\n//     }\n// ): Promise<boolean> {\n// }\n// export async function updateCollectionName(\n//     idx: IDX,\n//     params: {\n//         key: string;\n//         did?: string;\n//     }\n// ): Promise<boolean> {\n// }\n"]},"metadata":{},"sourceType":"module"}