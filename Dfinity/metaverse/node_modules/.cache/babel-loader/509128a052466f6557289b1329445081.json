{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.authenticate = exports.createLink = exports.normalizeAccountId = exports.isERC1271 = exports.isEthAddress = exports.EthereumAuthProvider = void 0;\n\nconst caip_1 = require(\"caip\");\n\nconst util_1 = require(\"./util\");\n\nconst uint8arrays = __importStar(require(\"uint8arrays\"));\n\nconst sha256 = __importStar(require(\"@stablelib/sha256\"));\n\nconst ADDRESS_TYPES = {\n  ethereumEOA: \"ethereum-eoa\",\n  erc1271: \"erc1271\"\n};\nconst CHAIN_NAMESPACE = \"eip155\";\n\nclass EthereumAuthProvider {\n  constructor(provider, address, opts = {}) {\n    this.provider = provider;\n    this.address = address;\n    this.opts = opts;\n    this.isAuthProvider = true;\n  }\n\n  async accountId() {\n    const payload = util_1.encodeRpcMessage(\"eth_chainId\", []);\n    const chainIdHex = await safeSend(payload, this.provider);\n    const chainId = parseInt(chainIdHex, 16);\n    return new caip_1.AccountID({\n      address: this.address,\n      chainId: `${CHAIN_NAMESPACE}:${chainId}`\n    });\n  }\n\n  async authenticate(message) {\n    const accountId = await this.accountId();\n    return authenticate(message, accountId, this.provider);\n  }\n\n  async createLink(did) {\n    const accountId = await this.accountId();\n    return createLink(did, accountId, this.provider, this.opts);\n  }\n\n  withAddress(address) {\n    return new EthereumAuthProvider(this.provider, address);\n  }\n\n}\n\nexports.EthereumAuthProvider = EthereumAuthProvider;\n\nfunction isEthAddress(address) {\n  return /^0x[a-fA-F0-9]{40}$/.test(address);\n}\n\nexports.isEthAddress = isEthAddress;\n\nasync function getCode(address, provider) {\n  const payload = util_1.encodeRpcMessage(\"eth_getCode\", [address, \"latest\"]);\n  return safeSend(payload, provider);\n}\n\nasync function safeSend(data, provider) {\n  const send = (provider.sendAsync ? provider.sendAsync : provider.send).bind(provider);\n  return new Promise((resolve, reject) => {\n    send(data, function (err, result) {\n      if (err) reject(err);else if (result.error) reject(result.error);else resolve(result.result);\n    });\n  });\n}\n\nasync function isERC1271(account, provider) {\n  const bytecode = await getCode(account.address, provider).catch(() => null);\n  return Boolean(bytecode && bytecode !== \"0x\" && bytecode !== \"0x0\" && bytecode !== \"0x00\");\n}\n\nexports.isERC1271 = isERC1271;\n\nfunction normalizeAccountId(account) {\n  account.address = account.address.toLowerCase();\n  return account;\n}\n\nexports.normalizeAccountId = normalizeAccountId;\n\nfunction utf8toHex(message) {\n  const bytes = uint8arrays.fromString(message);\n  const hex = uint8arrays.toString(bytes, \"base16\");\n  return \"0x\" + hex;\n}\n\nasync function createEthLink(did, account, provider, opts = {}) {\n  const {\n    message,\n    timestamp\n  } = util_1.getConsentMessage(did, !opts.skipTimestamp);\n  const hexMessage = utf8toHex(message);\n  const payload = util_1.encodeRpcMessage(\"personal_sign\", [hexMessage, account.address]);\n  const signature = await safeSend(payload, provider);\n  const proof = {\n    version: 2,\n    type: ADDRESS_TYPES.ethereumEOA,\n    message,\n    signature,\n    account: account.toString()\n  };\n  if (!opts.skipTimestamp) proof.timestamp = timestamp;\n  return proof;\n}\n\nasync function validateChainId(account, provider) {\n  const payload = util_1.encodeRpcMessage(\"eth_chainId\", []);\n  const chainIdHex = await safeSend(payload, provider);\n  const chainId = parseInt(chainIdHex, 16);\n\n  if (chainId !== parseInt(account.chainId.reference)) {\n    throw new Error(`ChainId in provider (${chainId}) is different from AccountID (${account.chainId.reference})`);\n  }\n}\n\nasync function createErc1271Link(did, account, provider, opts) {\n  const ethLinkAccount = (opts === null || opts === void 0 ? void 0 : opts.eoaSignAccount) || account;\n  const res = await createEthLink(did, ethLinkAccount, provider, opts);\n  await validateChainId(account, provider);\n  return Object.assign(res, {\n    type: ADDRESS_TYPES.erc1271,\n    account: account.toString()\n  });\n}\n\nasync function createLink(did, account, provider, opts) {\n  account = normalizeAccountId(account);\n\n  if (await isERC1271(account, provider)) {\n    return createErc1271Link(did, account, provider, opts);\n  } else {\n    return createEthLink(did, account, provider, opts);\n  }\n}\n\nexports.createLink = createLink;\n\nasync function authenticate(message, account, provider) {\n  if (account) account = normalizeAccountId(account);\n  if (provider.isAuthereum) return provider.signMessageWithSigningKey(message);\n  const hexMessage = utf8toHex(message);\n  const payload = util_1.encodeRpcMessage(\"personal_sign\", [hexMessage, account.address]);\n  const signature = await safeSend(payload, provider);\n  const signatureBytes = uint8arrays.fromString(signature.slice(2));\n  const digest = sha256.hash(signatureBytes);\n  return `0x${uint8arrays.toString(digest, 'base16')}`;\n}\n\nexports.authenticate = authenticate;","map":{"version":3,"sources":["../src/ethereum.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.authenticate = exports.createLink = exports.normalizeAccountId = exports.isERC1271 = exports.isEthAddress = exports.EthereumAuthProvider = void 0;\nconst caip_1 = require(\"caip\");\nconst util_1 = require(\"./util\");\nconst uint8arrays = __importStar(require(\"uint8arrays\"));\nconst sha256 = __importStar(require(\"@stablelib/sha256\"));\nconst ADDRESS_TYPES = {\n    ethereumEOA: \"ethereum-eoa\",\n    erc1271: \"erc1271\",\n};\nconst CHAIN_NAMESPACE = \"eip155\";\nclass EthereumAuthProvider {\n    constructor(provider, address, opts = {}) {\n        this.provider = provider;\n        this.address = address;\n        this.opts = opts;\n        this.isAuthProvider = true;\n    }\n    async accountId() {\n        const payload = util_1.encodeRpcMessage(\"eth_chainId\", []);\n        const chainIdHex = await safeSend(payload, this.provider);\n        const chainId = parseInt(chainIdHex, 16);\n        return new caip_1.AccountID({\n            address: this.address,\n            chainId: `${CHAIN_NAMESPACE}:${chainId}`,\n        });\n    }\n    async authenticate(message) {\n        const accountId = await this.accountId();\n        return authenticate(message, accountId, this.provider);\n    }\n    async createLink(did) {\n        const accountId = await this.accountId();\n        return createLink(did, accountId, this.provider, this.opts);\n    }\n    withAddress(address) {\n        return new EthereumAuthProvider(this.provider, address);\n    }\n}\nexports.EthereumAuthProvider = EthereumAuthProvider;\nfunction isEthAddress(address) {\n    return /^0x[a-fA-F0-9]{40}$/.test(address);\n}\nexports.isEthAddress = isEthAddress;\nasync function getCode(address, provider) {\n    const payload = util_1.encodeRpcMessage(\"eth_getCode\", [address, \"latest\"]);\n    return safeSend(payload, provider);\n}\nasync function safeSend(data, provider) {\n    const send = (provider.sendAsync ? provider.sendAsync : provider.send).bind(provider);\n    return new Promise((resolve, reject) => {\n        send(data, function (err, result) {\n            if (err)\n                reject(err);\n            else if (result.error)\n                reject(result.error);\n            else\n                resolve(result.result);\n        });\n    });\n}\nasync function isERC1271(account, provider) {\n    const bytecode = await getCode(account.address, provider).catch(() => null);\n    return Boolean(bytecode && bytecode !== \"0x\" && bytecode !== \"0x0\" && bytecode !== \"0x00\");\n}\nexports.isERC1271 = isERC1271;\nfunction normalizeAccountId(account) {\n    account.address = account.address.toLowerCase();\n    return account;\n}\nexports.normalizeAccountId = normalizeAccountId;\nfunction utf8toHex(message) {\n    const bytes = uint8arrays.fromString(message);\n    const hex = uint8arrays.toString(bytes, \"base16\");\n    return \"0x\" + hex;\n}\nasync function createEthLink(did, account, provider, opts = {}) {\n    const { message, timestamp } = util_1.getConsentMessage(did, !opts.skipTimestamp);\n    const hexMessage = utf8toHex(message);\n    const payload = util_1.encodeRpcMessage(\"personal_sign\", [\n        hexMessage,\n        account.address,\n    ]);\n    const signature = await safeSend(payload, provider);\n    const proof = {\n        version: 2,\n        type: ADDRESS_TYPES.ethereumEOA,\n        message,\n        signature,\n        account: account.toString(),\n    };\n    if (!opts.skipTimestamp)\n        proof.timestamp = timestamp;\n    return proof;\n}\nasync function validateChainId(account, provider) {\n    const payload = util_1.encodeRpcMessage(\"eth_chainId\", []);\n    const chainIdHex = await safeSend(payload, provider);\n    const chainId = parseInt(chainIdHex, 16);\n    if (chainId !== parseInt(account.chainId.reference)) {\n        throw new Error(`ChainId in provider (${chainId}) is different from AccountID (${account.chainId.reference})`);\n    }\n}\nasync function createErc1271Link(did, account, provider, opts) {\n    const ethLinkAccount = (opts === null || opts === void 0 ? void 0 : opts.eoaSignAccount) || account;\n    const res = await createEthLink(did, ethLinkAccount, provider, opts);\n    await validateChainId(account, provider);\n    return Object.assign(res, {\n        type: ADDRESS_TYPES.erc1271,\n        account: account.toString(),\n    });\n}\nasync function createLink(did, account, provider, opts) {\n    account = normalizeAccountId(account);\n    if (await isERC1271(account, provider)) {\n        return createErc1271Link(did, account, provider, opts);\n    }\n    else {\n        return createEthLink(did, account, provider, opts);\n    }\n}\nexports.createLink = createLink;\nasync function authenticate(message, account, provider) {\n    if (account)\n        account = normalizeAccountId(account);\n    if (provider.isAuthereum)\n        return provider.signMessageWithSigningKey(message);\n    const hexMessage = utf8toHex(message);\n    const payload = util_1.encodeRpcMessage(\"personal_sign\", [\n        hexMessage,\n        account.address,\n    ]);\n    const signature = await safeSend(payload, provider);\n    const signatureBytes = uint8arrays.fromString(signature.slice(2));\n    const digest = sha256.hash(signatureBytes);\n    return `0x${uint8arrays.toString(digest, 'base16')}`;\n}\nexports.authenticate = authenticate;\n//# sourceMappingURL=ethereum.js.map"]},"metadata":{},"sourceType":"script"}