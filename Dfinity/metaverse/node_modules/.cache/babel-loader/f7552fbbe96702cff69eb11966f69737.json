{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar _type, _cid;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamID = void 0;\n\nconst cids_1 = __importDefault(require(\"cids\"));\n\nconst multibase_1 = __importDefault(require(\"multibase\"));\n\nconst varint_1 = __importDefault(require(\"varint\"));\n\nconst concat_1 = __importDefault(require(\"uint8arrays/concat\"));\n\nconst to_string_1 = __importDefault(require(\"uint8arrays/to-string\"));\n\nconst constants_1 = require(\"./constants\");\n\nconst reading_bytes_1 = require(\"./reading-bytes\");\n\nconst typescript_memoize_1 = require(\"typescript-memoize\");\n\nconst commit_id_1 = require(\"./commit-id\");\n\nconst stream_type_1 = require(\"./stream-type\");\n\nfunction fromBytes(bytes) {\n  const [streamCodec, streamCodecRemainder] = reading_bytes_1.readVarint(bytes);\n  if (streamCodec !== constants_1.STREAMID_CODEC) throw new Error('fromBytes: invalid streamid, does not include streamid codec');\n  const [type, streamTypeRemainder] = reading_bytes_1.readVarint(streamCodecRemainder);\n  const [cid, cidRemainder] = reading_bytes_1.readCid(streamTypeRemainder);\n\n  if (cidRemainder.length > 0) {\n    throw new Error(`Invalid StreamID: contains commit`);\n  }\n\n  return new StreamID(type, cid);\n}\n\nfunction fromString(input) {\n  const protocolFree = input.replace('ceramic://', '').replace('/ceramic/', '');\n  const commitFree = protocolFree.includes('commit') ? protocolFree.split('?')[0] : protocolFree;\n  const bytes = multibase_1.default.decode(commitFree);\n  return fromBytes(bytes);\n}\n\nconst TAG = Symbol.for('@ceramicnetwork/streamid/StreamID');\n\nclass StreamID {\n  constructor(type, cid) {\n    this._tag = TAG;\n\n    _type.set(this, void 0);\n\n    _cid.set(this, void 0);\n\n    if (!(type || type === 0)) throw new Error('constructor: type required');\n    if (!cid) throw new Error('constructor: cid required');\n\n    __classPrivateFieldSet(this, _type, typeof type === 'string' ? stream_type_1.StreamType.codeByName(type) : type);\n\n    __classPrivateFieldSet(this, _cid, typeof cid === 'string' ? new cids_1.default(cid) : cid);\n  }\n\n  static isInstance(instance) {\n    return typeof instance === 'object' && '_tag' in instance && instance._tag === TAG;\n  }\n\n  get type() {\n    return __classPrivateFieldGet(this, _type);\n  }\n\n  get typeName() {\n    return stream_type_1.StreamType.nameByCode(__classPrivateFieldGet(this, _type));\n  }\n\n  get cid() {\n    return __classPrivateFieldGet(this, _cid);\n  }\n\n  get bytes() {\n    const codec = varint_1.default.encode(constants_1.STREAMID_CODEC);\n    const type = varint_1.default.encode(this.type);\n    return concat_1.default([codec, type, this.cid.bytes]);\n  }\n\n  get baseID() {\n    return new StreamID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid));\n  }\n\n  atCommit(commit) {\n    return new commit_id_1.CommitID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid), commit);\n  }\n\n  equals(other) {\n    if (StreamID.isInstance(other)) {\n      return this.type === other.type && this.cid.equals(other.cid);\n    } else {\n      return false;\n    }\n  }\n\n  toString() {\n    return to_string_1.default(multibase_1.default.encode(constants_1.DEFAULT_BASE, this.bytes));\n  }\n\n  toUrl() {\n    return `ceramic://${this.toString()}`;\n  }\n\n  [(_type = new WeakMap(), _cid = new WeakMap(), Symbol.for('nodejs.util.inspect.custom'))]() {\n    return `StreamID(${this.toString()})`;\n  }\n\n  [Symbol.toPrimitive]() {\n    return this.toString();\n  }\n\n}\n\nStreamID.fromBytes = fromBytes;\nStreamID.fromString = fromString;\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [])], StreamID.prototype, \"typeName\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", Uint8Array), __metadata(\"design:paramtypes\", [])], StreamID.prototype, \"bytes\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", StreamID), __metadata(\"design:paramtypes\", [])], StreamID.prototype, \"baseID\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", String)], StreamID.prototype, \"toString\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", String)], StreamID.prototype, \"toUrl\", null);\n\nexports.StreamID = StreamID;","map":{"version":3,"sources":["../src/stream-id.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _type, _cid;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamID = void 0;\nconst cids_1 = __importDefault(require(\"cids\"));\nconst multibase_1 = __importDefault(require(\"multibase\"));\nconst varint_1 = __importDefault(require(\"varint\"));\nconst concat_1 = __importDefault(require(\"uint8arrays/concat\"));\nconst to_string_1 = __importDefault(require(\"uint8arrays/to-string\"));\nconst constants_1 = require(\"./constants\");\nconst reading_bytes_1 = require(\"./reading-bytes\");\nconst typescript_memoize_1 = require(\"typescript-memoize\");\nconst commit_id_1 = require(\"./commit-id\");\nconst stream_type_1 = require(\"./stream-type\");\nfunction fromBytes(bytes) {\n    const [streamCodec, streamCodecRemainder] = reading_bytes_1.readVarint(bytes);\n    if (streamCodec !== constants_1.STREAMID_CODEC)\n        throw new Error('fromBytes: invalid streamid, does not include streamid codec');\n    const [type, streamTypeRemainder] = reading_bytes_1.readVarint(streamCodecRemainder);\n    const [cid, cidRemainder] = reading_bytes_1.readCid(streamTypeRemainder);\n    if (cidRemainder.length > 0) {\n        throw new Error(`Invalid StreamID: contains commit`);\n    }\n    return new StreamID(type, cid);\n}\nfunction fromString(input) {\n    const protocolFree = input.replace('ceramic://', '').replace('/ceramic/', '');\n    const commitFree = protocolFree.includes('commit') ? protocolFree.split('?')[0] : protocolFree;\n    const bytes = multibase_1.default.decode(commitFree);\n    return fromBytes(bytes);\n}\nconst TAG = Symbol.for('@ceramicnetwork/streamid/StreamID');\nclass StreamID {\n    constructor(type, cid) {\n        this._tag = TAG;\n        _type.set(this, void 0);\n        _cid.set(this, void 0);\n        if (!(type || type === 0))\n            throw new Error('constructor: type required');\n        if (!cid)\n            throw new Error('constructor: cid required');\n        __classPrivateFieldSet(this, _type, typeof type === 'string' ? stream_type_1.StreamType.codeByName(type) : type);\n        __classPrivateFieldSet(this, _cid, typeof cid === 'string' ? new cids_1.default(cid) : cid);\n    }\n    static isInstance(instance) {\n        return typeof instance === 'object' && '_tag' in instance && instance._tag === TAG;\n    }\n    get type() {\n        return __classPrivateFieldGet(this, _type);\n    }\n    get typeName() {\n        return stream_type_1.StreamType.nameByCode(__classPrivateFieldGet(this, _type));\n    }\n    get cid() {\n        return __classPrivateFieldGet(this, _cid);\n    }\n    get bytes() {\n        const codec = varint_1.default.encode(constants_1.STREAMID_CODEC);\n        const type = varint_1.default.encode(this.type);\n        return concat_1.default([codec, type, this.cid.bytes]);\n    }\n    get baseID() {\n        return new StreamID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid));\n    }\n    atCommit(commit) {\n        return new commit_id_1.CommitID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid), commit);\n    }\n    equals(other) {\n        if (StreamID.isInstance(other)) {\n            return this.type === other.type && this.cid.equals(other.cid);\n        }\n        else {\n            return false;\n        }\n    }\n    toString() {\n        return to_string_1.default(multibase_1.default.encode(constants_1.DEFAULT_BASE, this.bytes));\n    }\n    toUrl() {\n        return `ceramic://${this.toString()}`;\n    }\n    [(_type = new WeakMap(), _cid = new WeakMap(), Symbol.for('nodejs.util.inspect.custom'))]() {\n        return `StreamID(${this.toString()})`;\n    }\n    [Symbol.toPrimitive]() {\n        return this.toString();\n    }\n}\nStreamID.fromBytes = fromBytes;\nStreamID.fromString = fromString;\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [])\n], StreamID.prototype, \"typeName\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", Uint8Array),\n    __metadata(\"design:paramtypes\", [])\n], StreamID.prototype, \"bytes\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", StreamID),\n    __metadata(\"design:paramtypes\", [])\n], StreamID.prototype, \"baseID\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", String)\n], StreamID.prototype, \"toString\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", String)\n], StreamID.prototype, \"toUrl\", null);\nexports.StreamID = StreamID;\n//# sourceMappingURL=stream-id.js.map"]},"metadata":{},"sourceType":"script"}