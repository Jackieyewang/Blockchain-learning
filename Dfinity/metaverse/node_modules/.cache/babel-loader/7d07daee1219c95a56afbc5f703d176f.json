{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyToDidDoc = void 0;\n\nconst u8a = __importStar(require(\"uint8arrays\"));\n\nfunction keyToDidDoc(pubKeyBytes, fingerprint) {\n  const did = `did:key:${fingerprint}`;\n  const keyId = `${did}#${fingerprint}`;\n  return {\n    id: did,\n    verificationMethod: [{\n      id: keyId,\n      type: 'Secp256k1VerificationKey2018',\n      controller: did,\n      publicKeyBase58: u8a.toString(pubKeyBytes, \"base58btc\")\n    }],\n    authentication: [keyId],\n    assertionMethod: [keyId],\n    capabilityDelegation: [keyId],\n    capabilityInvocation: [keyId]\n  };\n}\n\nexports.keyToDidDoc = keyToDidDoc;","map":{"version":3,"sources":["../src/secp256k1.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AAKA,SAAgB,WAAhB,CAA6B,WAA7B,EAAsD,WAAtD,EAAyE;AACvE,QAAM,GAAG,GAAG,WAAW,WAAW,EAAlC;AACA,QAAM,KAAK,GAAG,GAAG,GAAG,IAAI,WAAW,EAAnC;AACA,SAAO;AACL,IAAA,EAAE,EAAE,GADC;AAEL,IAAA,kBAAkB,EAAE,CAAC;AACnB,MAAA,EAAE,EAAE,KADe;AAEnB,MAAA,IAAI,EAAE,8BAFa;AAGnB,MAAA,UAAU,EAAE,GAHO;AAInB,MAAA,eAAe,EAAE,GAAG,CAAC,QAAJ,CAAa,WAAb,EAA0B,WAA1B;AAJE,KAAD,CAFf;AAQL,IAAA,cAAc,EAAE,CAAC,KAAD,CARX;AASL,IAAA,eAAe,EAAE,CAAC,KAAD,CATZ;AAUL,IAAA,oBAAoB,EAAE,CAAC,KAAD,CAVjB;AAWL,IAAA,oBAAoB,EAAE,CAAC,KAAD;AAXjB,GAAP;AAaD;;AAhBD,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keyToDidDoc = void 0;\nconst u8a = __importStar(require(\"uint8arrays\"));\nfunction keyToDidDoc(pubKeyBytes, fingerprint) {\n    const did = `did:key:${fingerprint}`;\n    const keyId = `${did}#${fingerprint}`;\n    return {\n        id: did,\n        verificationMethod: [{\n                id: keyId,\n                type: 'Secp256k1VerificationKey2018',\n                controller: did,\n                publicKeyBase58: u8a.toString(pubKeyBytes, \"base58btc\"),\n            }],\n        authentication: [keyId],\n        assertionMethod: [keyId],\n        capabilityDelegation: [keyId],\n        capabilityInvocation: [keyId],\n    };\n}\nexports.keyToDidDoc = keyToDidDoc;\n//# sourceMappingURL=secp256k1.js.map"]},"metadata":{},"sourceType":"script"}