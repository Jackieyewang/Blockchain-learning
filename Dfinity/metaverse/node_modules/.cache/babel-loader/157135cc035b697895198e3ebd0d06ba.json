{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CosmosAuthProvider = exports.getMetaData = exports.asTransaction = void 0;\n\nconst caip_1 = require(\"caip\");\n\nconst util_1 = require(\"./util\");\n\nconst sha256_1 = require(\"@stablelib/sha256\");\n\nconst uint8arrays = __importStar(require(\"uint8arrays\"));\n\nconst stringEncode = str => uint8arrays.toString(uint8arrays.fromString(str), 'base64pad');\n\nfunction asTransaction(address, message) {\n  return {\n    fee: {\n      amount: [{\n        amount: '0',\n        denom: ''\n      }],\n      gas: '0'\n    },\n    memo: message,\n    msg: [{\n      type: 'cosmos-sdk/MsgSend',\n      value: {\n        from_address: address,\n        to_address: address,\n        amount: [{\n          amount: '0',\n          denom: '0'\n        }]\n      }\n    }]\n  };\n}\n\nexports.asTransaction = asTransaction;\n\nfunction getMetaData() {\n  return {\n    account_number: '1',\n    chain_id: 'cosmos',\n    sequence: '0'\n  };\n}\n\nexports.getMetaData = getMetaData;\n\nclass CosmosAuthProvider {\n  constructor(provider, address, chainRef) {\n    this.provider = provider;\n    this.address = address;\n    this.chainRef = chainRef;\n    this.isAuthProvider = true;\n  }\n\n  async authenticate(message) {\n    const accountID = await this.accountId();\n    const encodedMsg = stringEncode(message);\n    const res = await this.provider.sign(asTransaction(accountID.address, encodedMsg), getMetaData());\n    const digest = sha256_1.hash(uint8arrays.fromString(JSON.stringify(res.signatures[0])));\n    return `0x${uint8arrays.toString(digest, 'base16')}`;\n  }\n\n  async createLink(did) {\n    const {\n      message,\n      timestamp\n    } = util_1.getConsentMessage(did);\n    const accountID = await this.accountId();\n    const encodedMsg = stringEncode(message);\n    const res = await this.provider.sign(asTransaction(accountID.address, encodedMsg), getMetaData());\n    const signature = stringEncode(JSON.stringify(res.signatures[0]));\n    const proof = {\n      version: 1,\n      message,\n      signature,\n      account: accountID.toString(),\n      timestamp\n    };\n    return proof;\n  }\n\n  async accountId() {\n    return new caip_1.AccountID({\n      address: this.address,\n      chainId: `cosmos:${this.chainRef}`\n    });\n  }\n\n  withAddress(address) {\n    return new CosmosAuthProvider(this.provider, address, this.chainRef);\n  }\n\n}\n\nexports.CosmosAuthProvider = CosmosAuthProvider;","map":{"version":3,"sources":["../src/cosmos.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CosmosAuthProvider = exports.getMetaData = exports.asTransaction = void 0;\nconst caip_1 = require(\"caip\");\nconst util_1 = require(\"./util\");\nconst sha256_1 = require(\"@stablelib/sha256\");\nconst uint8arrays = __importStar(require(\"uint8arrays\"));\nconst stringEncode = (str) => uint8arrays.toString(uint8arrays.fromString(str), 'base64pad');\nfunction asTransaction(address, message) {\n    return {\n        fee: {\n            amount: [{ amount: '0', denom: '' }],\n            gas: '0',\n        },\n        memo: message,\n        msg: [\n            {\n                type: 'cosmos-sdk/MsgSend',\n                value: {\n                    from_address: address,\n                    to_address: address,\n                    amount: [{ amount: '0', denom: '0' }],\n                },\n            },\n        ],\n    };\n}\nexports.asTransaction = asTransaction;\nfunction getMetaData() {\n    return {\n        account_number: '1',\n        chain_id: 'cosmos',\n        sequence: '0',\n    };\n}\nexports.getMetaData = getMetaData;\nclass CosmosAuthProvider {\n    constructor(provider, address, chainRef) {\n        this.provider = provider;\n        this.address = address;\n        this.chainRef = chainRef;\n        this.isAuthProvider = true;\n    }\n    async authenticate(message) {\n        const accountID = await this.accountId();\n        const encodedMsg = stringEncode(message);\n        const res = await this.provider.sign(asTransaction(accountID.address, encodedMsg), getMetaData());\n        const digest = sha256_1.hash(uint8arrays.fromString(JSON.stringify(res.signatures[0])));\n        return `0x${uint8arrays.toString(digest, 'base16')}`;\n    }\n    async createLink(did) {\n        const { message, timestamp } = util_1.getConsentMessage(did);\n        const accountID = await this.accountId();\n        const encodedMsg = stringEncode(message);\n        const res = await this.provider.sign(asTransaction(accountID.address, encodedMsg), getMetaData());\n        const signature = stringEncode(JSON.stringify(res.signatures[0]));\n        const proof = {\n            version: 1,\n            message,\n            signature,\n            account: accountID.toString(),\n            timestamp,\n        };\n        return proof;\n    }\n    async accountId() {\n        return new caip_1.AccountID({\n            address: this.address,\n            chainId: `cosmos:${this.chainRef}`,\n        });\n    }\n    withAddress(address) {\n        return new CosmosAuthProvider(this.provider, address, this.chainRef);\n    }\n}\nexports.CosmosAuthProvider = CosmosAuthProvider;\n//# sourceMappingURL=cosmos.js.map"]},"metadata":{},"sourceType":"script"}