{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamType = void 0;\nconst registry = {\n  tile: 0,\n  'caip10-link': 1\n};\n\nfunction codeByName(name) {\n  const index = registry[name];\n\n  if (typeof index !== 'undefined') {\n    return index;\n  } else {\n    throw new Error(`No stream type registered for name ${name}`);\n  }\n}\n\nfunction nameByCode(index) {\n  const pair = Object.entries(registry).find(([, v]) => v === index);\n\n  if (pair) {\n    return pair[0];\n  } else {\n    throw new Error(`No stream type registered for index ${index}`);\n  }\n}\n\nclass StreamType {}\n\nexports.StreamType = StreamType;\nStreamType.nameByCode = nameByCode;\nStreamType.codeByName = codeByName;","map":{"version":3,"sources":["../src/stream-type.ts"],"names":[],"mappings":";;;;;;AAAA,MAAM,QAAQ,GAAuC;AACnD,EAAA,IAAI,EAAE,CAD6C;AAEnD,iBAAe;AAFoC,CAArD;;AAKA,SAAS,UAAT,CAAoB,IAApB,EAAgC;AAC9B,QAAM,KAAK,GAAG,QAAQ,CAAC,IAAD,CAAtB;;AACA,MAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC;AAChC,WAAO,KAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAI,KAAJ,CAAU,sCAAsC,IAAI,EAApD,CAAN;AACD;AACF;;AAED,SAAS,UAAT,CAAoB,KAApB,EAAiC;AAC/B,QAAM,IAAI,GAAG,MAAM,CAAC,OAAP,CAAe,QAAf,EAAyB,IAAzB,CAA8B,CAAC,GAAG,CAAH,CAAD,KAAW,CAAC,KAAK,KAA/C,CAAb;;AACA,MAAI,IAAJ,EAAU;AACR,WAAO,IAAI,CAAC,CAAD,CAAX;AACD,GAFD,MAEO;AACL,UAAM,IAAI,KAAJ,CAAU,uCAAuC,KAAK,EAAtD,CAAN;AACD;AACF;;AAED,MAAa,UAAb,CAAuB;;AAAvB,OAAA,CAAA,UAAA,GAAA,UAAA;AACS,UAAA,CAAA,UAAA,GAAa,UAAb;AACA,UAAA,CAAA,UAAA,GAAa,UAAb","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamType = void 0;\nconst registry = {\n    tile: 0,\n    'caip10-link': 1,\n};\nfunction codeByName(name) {\n    const index = registry[name];\n    if (typeof index !== 'undefined') {\n        return index;\n    }\n    else {\n        throw new Error(`No stream type registered for name ${name}`);\n    }\n}\nfunction nameByCode(index) {\n    const pair = Object.entries(registry).find(([, v]) => v === index);\n    if (pair) {\n        return pair[0];\n    }\n    else {\n        throw new Error(`No stream type registered for index ${index}`);\n    }\n}\nclass StreamType {\n}\nexports.StreamType = StreamType;\nStreamType.nameByCode = nameByCode;\nStreamType.codeByName = codeByName;\n//# sourceMappingURL=stream-type.js.map"]},"metadata":{},"sourceType":"script"}