{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamRef = void 0;\n\nconst stream_id_1 = require(\"./stream-id\");\n\nconst commit_id_1 = require(\"./commit-id\");\n\nconst uint8arrays = __importStar(require(\"uint8arrays\"));\n\nfunction tryCatch(f) {\n  try {\n    return f();\n  } catch (_a) {\n    return null;\n  }\n}\n\nfunction complain(message) {\n  throw new Error(message);\n}\n\nvar StreamRef;\n\n(function (StreamRef) {\n  function from(input) {\n    if (stream_id_1.StreamID.isInstance(input)) {\n      return input;\n    } else if (commit_id_1.CommitID.isInstance(input)) {\n      return input;\n    } else if (input instanceof Uint8Array) {\n      return tryCatch(() => commit_id_1.CommitID.fromBytes(input)) || tryCatch(() => stream_id_1.StreamID.fromBytes(input)) || complain(`Can not build CommitID or StreamID from bytes ${uint8arrays.toString(input, 'base36')}`);\n    } else if (typeof input === 'string') {\n      return tryCatch(() => commit_id_1.CommitID.fromString(input)) || tryCatch(() => stream_id_1.StreamID.fromString(input)) || complain(`Can not build CommitID or StreamID from string ${input}`);\n    } else {\n      throw new Error(`Can not build CommitID or StreamID`);\n    }\n  }\n\n  StreamRef.from = from;\n})(StreamRef = exports.StreamRef || (exports.StreamRef = {}));","map":{"version":3,"sources":["../src/stream-ref.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,WAAA,GAAA,YAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AAoBA,SAAS,QAAT,CAAqB,CAArB,EAA+B;AAC7B,MAAI;AACF,WAAO,CAAC,EAAR;AACD,GAFD,CAEE,OAAA,EAAA,EAAM;AACN,WAAO,IAAP;AACD;AACF;;AAMD,SAAS,QAAT,CAAkB,OAAlB,EAAiC;AAC/B,QAAM,IAAI,KAAJ,CAAU,OAAV,CAAN;AACD;;AAGD,IAAiB,SAAjB;;AAAA,CAAA,UAAiB,SAAjB,EAA0B;AAKxB,WAAgB,IAAhB,CAAqB,KAArB,EAAqE;AACnE,QAAI,WAAA,CAAA,QAAA,CAAS,UAAT,CAAoB,KAApB,CAAJ,EAAgC;AAC9B,aAAO,KAAP;AACD,KAFD,MAEO,IAAI,WAAA,CAAA,QAAA,CAAS,UAAT,CAAoB,KAApB,CAAJ,EAAgC;AACrC,aAAO,KAAP;AACD,KAFM,MAEA,IAAI,KAAK,YAAY,UAArB,EAAiC;AAEtC,aACE,QAAQ,CAAC,MAAM,WAAA,CAAA,QAAA,CAAS,SAAT,CAAmB,KAAnB,CAAP,CAAR,IACA,QAAQ,CAAC,MAAM,WAAA,CAAA,QAAA,CAAS,SAAT,CAAmB,KAAnB,CAAP,CADR,IAEA,QAAQ,CAAC,iDAAiD,WAAW,CAAC,QAAZ,CAAqB,KAArB,EAA4B,QAA5B,CAAqC,EAAvF,CAHV;AAKD,KAPM,MAOA,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAEpC,aACE,QAAQ,CAAC,MAAM,WAAA,CAAA,QAAA,CAAS,UAAT,CAAoB,KAApB,CAAP,CAAR,IACA,QAAQ,CAAC,MAAM,WAAA,CAAA,QAAA,CAAS,UAAT,CAAoB,KAApB,CAAP,CADR,IAEA,QAAQ,CAAC,kDAAkD,KAAK,EAAxD,CAHV;AAKD,KAPM,MAOA;AACL,YAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACD;AACF;;AAtBe,EAAA,SAAA,CAAA,IAAA,GAAI,IAAJ;AAuBjB,CA5BD,EAAiB,SAAS,GAAT,OAAA,CAAA,SAAA,KAAA,OAAA,CAAA,SAAA,GAAS,EAAT,CAAjB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamRef = void 0;\nconst stream_id_1 = require(\"./stream-id\");\nconst commit_id_1 = require(\"./commit-id\");\nconst uint8arrays = __importStar(require(\"uint8arrays\"));\nfunction tryCatch(f) {\n    try {\n        return f();\n    }\n    catch (_a) {\n        return null;\n    }\n}\nfunction complain(message) {\n    throw new Error(message);\n}\nvar StreamRef;\n(function (StreamRef) {\n    function from(input) {\n        if (stream_id_1.StreamID.isInstance(input)) {\n            return input;\n        }\n        else if (commit_id_1.CommitID.isInstance(input)) {\n            return input;\n        }\n        else if (input instanceof Uint8Array) {\n            return (tryCatch(() => commit_id_1.CommitID.fromBytes(input)) ||\n                tryCatch(() => stream_id_1.StreamID.fromBytes(input)) ||\n                complain(`Can not build CommitID or StreamID from bytes ${uint8arrays.toString(input, 'base36')}`));\n        }\n        else if (typeof input === 'string') {\n            return (tryCatch(() => commit_id_1.CommitID.fromString(input)) ||\n                tryCatch(() => stream_id_1.StreamID.fromString(input)) ||\n                complain(`Can not build CommitID or StreamID from string ${input}`));\n        }\n        else {\n            throw new Error(`Can not build CommitID or StreamID`);\n        }\n    }\n    StreamRef.from = from;\n})(StreamRef = exports.StreamRef || (exports.StreamRef = {}));\n//# sourceMappingURL=stream-ref.js.map"]},"metadata":{},"sourceType":"script"}