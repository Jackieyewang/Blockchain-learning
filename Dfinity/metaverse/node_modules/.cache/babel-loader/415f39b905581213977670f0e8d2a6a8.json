{"ast":null,"code":"import { authenticateWithEthereum, getAllBookmarks, getBookmarks, getDID, initCollections, isIDXAuthenticated } from '../../apis/ceramic';\nimport { connectWithWeb3 } from '../../apis/web3';\nimport { COLLECTION_TYPE, STORAGE_TYPE, EVENT_TYPE } from '../../utils/constants';\nimport storage from '../../utils/storage';\nimport EventBus from '../../utils/EventBus';\nexport async function getCustomBookmarks(collection) {\n  if (!isIDXAuthenticated()) {\n    const {\n      provider,\n      addresses\n    } = await connectWithWeb3();\n    await authenticateWithEthereum(provider, addresses[0]);\n    await initCollections();\n  }\n\n  let collectionsNames = [];\n  let collections = [];\n\n  if (collection === COLLECTION_TYPE.AllBookmarks) {\n    const res = await getAllBookmarks();\n    collections = formatAllBookmarks(res);\n    collectionsNames = Object.keys(res);\n    EventBus.emit(EVENT_TYPE.SET_DID, getDID());\n    EventBus.emit(EVENT_TYPE.SET_COLLECTIONS_MENUS, collectionsNames);\n    storage.setItem(STORAGE_TYPE.STORED_COLLECTIONS, collections);\n    storage.setItem(STORAGE_TYPE.STORED_COLLECTIONS_NAMES, collectionsNames);\n    storage.setItem(STORAGE_TYPE.STORED_DID, getDID());\n  } else {\n    collections = await getBookmarks(collection);\n  }\n\n  const res = {\n    list: collections,\n    did: getDID()\n  };\n  return res;\n}\nexport function formatAllBookmarks(res) {\n  const ret = [];\n\n  for (const value of Object.values(res)) {\n    ret.push(...value);\n  }\n\n  return ret;\n}","map":{"version":3,"sources":["/Users/apple/Documents/ownership/Datadidi/test/DataDiDi/packages/metaverse/src/pages/NFTView/utils.ts"],"names":["authenticateWithEthereum","getAllBookmarks","getBookmarks","getDID","initCollections","isIDXAuthenticated","connectWithWeb3","COLLECTION_TYPE","STORAGE_TYPE","EVENT_TYPE","storage","EventBus","getCustomBookmarks","collection","provider","addresses","collectionsNames","collections","AllBookmarks","res","formatAllBookmarks","Object","keys","emit","SET_DID","SET_COLLECTIONS_MENUS","setItem","STORED_COLLECTIONS","STORED_COLLECTIONS_NAMES","STORED_DID","list","did","ret","value","values","push"],"mappings":"AAGA,SACEA,wBADF,EAEEC,eAFF,EAGEC,YAHF,EAIEC,MAJF,EAKEC,eALF,EAMEC,kBANF,QAOO,oBAPP;AAQA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,UAAxC,QAA0D,uBAA1D;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,OAAO,eAAeC,kBAAf,CAAkCC,UAAlC,EAAsD;AAC3D,MAAI,CAACR,kBAAkB,EAAvB,EAA2B;AACzB,UAAM;AAAES,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0B,MAAMT,eAAe,EAArD;AACA,UAAMN,wBAAwB,CAACc,QAAD,EAAWC,SAAS,CAAC,CAAD,CAApB,CAA9B;AACA,UAAMX,eAAe,EAArB;AACD;;AAED,MAAIY,gBAA0B,GAAG,EAAjC;AACA,MAAIC,WAAuB,GAAG,EAA9B;;AAEA,MAAIJ,UAAU,KAAKN,eAAe,CAACW,YAAnC,EAAiD;AAC/C,UAAMC,GAAG,GAAG,MAAMlB,eAAe,EAAjC;AACAgB,IAAAA,WAAW,GAAGG,kBAAkB,CAACD,GAAD,CAAhC;AACAH,IAAAA,gBAAgB,GAAGK,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAnB;AACAR,IAAAA,QAAQ,CAACY,IAAT,CAAcd,UAAU,CAACe,OAAzB,EAAkCrB,MAAM,EAAxC;AACAQ,IAAAA,QAAQ,CAACY,IAAT,CAAcd,UAAU,CAACgB,qBAAzB,EAAgDT,gBAAhD;AACAN,IAAAA,OAAO,CAACgB,OAAR,CAAgBlB,YAAY,CAACmB,kBAA7B,EAAiDV,WAAjD;AACAP,IAAAA,OAAO,CAACgB,OAAR,CAAgBlB,YAAY,CAACoB,wBAA7B,EAAuDZ,gBAAvD;AACAN,IAAAA,OAAO,CAACgB,OAAR,CAAgBlB,YAAY,CAACqB,UAA7B,EAAyC1B,MAAM,EAA/C;AACD,GATD,MASO;AACLc,IAAAA,WAAW,GAAG,MAAMf,YAAY,CAACW,UAAD,CAAhC;AACD;;AAED,QAAMM,GAAG,GAAG;AACVW,IAAAA,IAAI,EAAEb,WADI;AAEVc,IAAAA,GAAG,EAAE5B,MAAM;AAFD,GAAZ;AAKA,SAAOgB,GAAP;AACD;AAED,OAAO,SAASC,kBAAT,CAA4BD,GAA5B,EAAmF;AACxF,QAAMa,GAAe,GAAG,EAAxB;;AACA,OAAK,MAAMC,KAAX,IAAoBZ,MAAM,CAACa,MAAP,CAAcf,GAAd,CAApB,EAAwC;AACtCa,IAAAA,GAAG,CAACG,IAAJ,CAAS,GAAGF,KAAZ;AACD;;AACD,SAAOD,GAAP;AACD","sourcesContent":["import type { Bookmark } from 'idx-common';\nimport { PromiseValue } from 'type-fest';\n\nimport {\n  authenticateWithEthereum,\n  getAllBookmarks,\n  getBookmarks,\n  getDID,\n  initCollections,\n  isIDXAuthenticated,\n} from '../../apis/ceramic';\nimport { connectWithWeb3 } from '../../apis/web3';\nimport { COLLECTION_TYPE, STORAGE_TYPE, EVENT_TYPE } from '../../utils/constants';\nimport storage from '../../utils/storage';\nimport EventBus from '../../utils/EventBus';\n\nexport async function getCustomBookmarks(collection: string) {\n  if (!isIDXAuthenticated()) {\n    const { provider, addresses } = await connectWithWeb3();\n    await authenticateWithEthereum(provider, addresses[0]);\n    await initCollections();\n  }\n\n  let collectionsNames: string[] = [];\n  let collections: Bookmark[] = [];\n\n  if (collection === COLLECTION_TYPE.AllBookmarks) {\n    const res = await getAllBookmarks();\n    collections = formatAllBookmarks(res);\n    collectionsNames = Object.keys(res);\n    EventBus.emit(EVENT_TYPE.SET_DID, getDID());\n    EventBus.emit(EVENT_TYPE.SET_COLLECTIONS_MENUS, collectionsNames);\n    storage.setItem(STORAGE_TYPE.STORED_COLLECTIONS, collections);\n    storage.setItem(STORAGE_TYPE.STORED_COLLECTIONS_NAMES, collectionsNames);\n    storage.setItem(STORAGE_TYPE.STORED_DID, getDID());\n  } else {\n    collections = await getBookmarks(collection);\n  }\n\n  const res = {\n    list: collections,\n    did: getDID(),\n  };\n\n  return res;\n}\n\nexport function formatAllBookmarks(res: PromiseValue<ReturnType<typeof getAllBookmarks>>) {\n  const ret: Bookmark[] = [];\n  for (const value of Object.values(res)) {\n    ret.push(...value);\n  }\n  return ret;\n}\n"]},"metadata":{},"sourceType":"module"}