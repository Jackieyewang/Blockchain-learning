{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Substream = void 0;\n\nconst readable_stream_1 = require(\"readable-stream\");\n\nclass Substream extends readable_stream_1.Duplex {\n  constructor({\n    parent,\n    name\n  }) {\n    super({\n      objectMode: true\n    });\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nexports.Substream = Substream;","map":{"version":3,"sources":["../src/Substream.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAQA,MAAa,SAAb,SAA+B,iBAAA,CAAA,MAA/B,CAAqC;AAKnC,EAAA,WAAA,CAAY;AAAE,IAAA,MAAF;AAAU,IAAA;AAAV,GAAZ,EAA8C;AAC5C,UAAM;AAAE,MAAA,UAAU,EAAE;AAAd,KAAN;AACA,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,KAAL,GAAa,IAAb;AACD;AAED;;AAEG;;;AACH,EAAA,KAAK,GAAA;AACH,WAAO,SAAP;AACD;AAED;;;;;;AAMG;;;AACH,EAAA,MAAM,CACJ,KADI,EAEJ,SAFI,EAGJ,QAHI,EAGoC;AAExC,SAAK,OAAL,CAAa,IAAb,CAAkB;AAChB,MAAA,IAAI,EAAE,KAAK,KADK;AAEhB,MAAA,IAAI,EAAE;AAFU,KAAlB;;AAIA,IAAA,QAAQ;AACT;;AAnCkC;;AAArC,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Substream = void 0;\nconst readable_stream_1 = require(\"readable-stream\");\nclass Substream extends readable_stream_1.Duplex {\n    constructor({ parent, name }) {\n        super({ objectMode: true });\n        this._parent = parent;\n        this._name = name;\n    }\n    /**\n     * Explicitly sets read operations to a no-op.\n     */\n    _read() {\n        return undefined;\n    }\n    /**\n     * Called when data should be written to this writable stream.\n     *\n     * @param chunk - Arbitrary object to write\n     * @param encoding - Encoding to use when writing payload\n     * @param callback - Called when writing is complete or an error occurs\n     */\n    _write(chunk, _encoding, callback) {\n        this._parent.push({\n            name: this._name,\n            data: chunk,\n        });\n        callback();\n    }\n}\nexports.Substream = Substream;\n//# sourceMappingURL=Substream.js.map"]},"metadata":{},"sourceType":"script"}